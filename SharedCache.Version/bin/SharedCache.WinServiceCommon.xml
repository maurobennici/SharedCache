<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharedCache.WinServiceCommon</name>
    </assembly>
    <members>
        <member name="T:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtension">
            <summary>
            Define a SOAP Extension that traces the SOAP request and SOAP response for 
            the XML Web service method the SOAP extension is applied to.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtension.GetInitializer(System.Type)">
            <summary>
            The SOAP extension was configured to run using a configuration file instead 
            of an attribute applied to a specific XML Web service method.
            </summary>
            <param name="serviceType">A <see cref="T:System.Type"/> obejct.</param>
            <returns>An <see cref="T:System.Object"/> obejct.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            When the SOAP extension is accessed for the first time, the XML Web service method it is applied to 
            is accessed to store the file name passed in, using the corresponding SoapExtensionAttribute.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo"/> methodInfo.</param>
            <param name="attribute">A <see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute"/> object.</param>
            <returns>An <see cref="T:System.Object"/> obejct.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtension.Initialize(System.Object)">
            <summary>
            Receive the file name stored by GetInitializer and store it in 
            a member variable for this specific instance.
            </summary>
            <param name="initializer">An <see cref="T:System.Object"/> obejct.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtension.ChainStream(System.IO.Stream)">
            <summary>
            When overridden in a derived class, allows a SOAP extension access to the memory buffer containing the SOAP request or response.
            </summary>
            <returns>
            A <see cref="T:System.IO.Stream"/> representing a new memory buffer that this SOAP extension can modify.
            </returns>
            <param name="stream">A memory buffer containing the SOAP request or response. 
                            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtension.YankIt(System.IO.Stream)">
            <summary>
            Yanks it.
            </summary>
            <param name="streamToPrefix">The stream to prefix.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            When overridden in a derived class, allows a SOAP extension to receive a <see cref="T:System.Web.Services.Protocols.SoapMessage"/> to process at each <see cref="T:System.Web.Services.Protocols.SoapMessageStage"/>.
            </summary>
            <param name="message">The <see cref="T:System.Web.Services.Protocols.SoapMessage"/> to process.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtension.WriteInput(System.Web.Services.Protocols.SoapServerMessage)">
            <summary>
             Write the contents of the incoming SOAP message to the log file.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtension.WriteOutput(System.Web.Services.Protocols.SoapServerMessage)">
            <summary>
             Write the contents of the outgoing SOAP message to the log file.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtensionAttribute">
            <summary>
            Create a SoapExtensionAttribute for a SOAP extension that can be applied to an XML Web service method. 
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtensionAttribute.ExtensionType">
            <summary>
            Return the type of 'SharedCacheSoapExtensionAttribute' class.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtensionAttribute.Priority">
            <summary>
            User can set priority of the 'SoapExtension'.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Attributes.SharedCacheSoapExtensionAttribute.CacheInSecond">
            <summary>
            Define how much time Data should stay in cache.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.CacheCleanup">
            <summary>
            Logic within this class maintains cache data and statistics, like increasing key
            hit counts this is used in case the cache reaches its maximum memory capacity
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheCleanup.bulkObject">
            <summary>
            needed for lock(){} operations 
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheCleanup.CleanupCacheConfiguration">
            <summary>
            Gets/sets the CleanupCacheConfiguration
            Defines the cleanup cache configuration, the default value is CACHEITEMPRIORITY [check <see cref="T:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp"/> for more information]
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheCleanup.CacheAmountOfObjects">
            <summary>
            Gets the CacheAmountOfObjects (extern readonly)
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheCleanup.CacheFillFactor">
            <summary>
            Gets/sets the CacheFillFactor
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheCleanup.PurgeIsRunning">
            <summary>
            Gets the PurgeIsRunning
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheCleanup.CleanupDict">
            <summary>
            Gets the cleanup list.
            </summary>
            <value>The cleanup list.</value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheCleanup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.CacheCleanup"/> class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheCleanup.HybridChecksum(System.Int64)">
            <summary>
            checksum for Hybrid cache clearup, makes a recursive call 
            until it receives a smaller value then: 100000
            </summary>
            <param name="para">The para.</param>
            <returns>a smaller value then: 100000</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheCleanup.CalculateHybridChecksum(SharedCache.WinServiceCommon.Cleanup,SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp)">
            <summary>
            Calculates the hybrid checksum, this is used to
            create rate for every specific object in the cache
            based on various object attributes.
            <remarks>
            The calculate done like this: HybridChecksum((c.HitRatio + ((c.ObjectSize / 1024) + (c.Span.Ticks / 1024) + (c.UsageDatetime.Ticks / 1024))));
            </remarks>
            </summary>
            <param name="c">an object of type <see cref="T:SharedCache.WinServiceCommon.Cleanup"/></param>
            <param name="currentConfiguration">The current configuration.</param>
            <returns>a rate as <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheCleanup.Update(SharedCache.WinServiceCommon.IndexusMessage)">
            <summary>
            Updates the specified msg or its updating the available record if its already added.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheCleanup.GetAccessStatList">
            <summary>
            Gets the access stat list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheCleanup.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheCleanup.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheCleanup.Purge(System.Int64)">
            <summary>
            Purges this instance, free memory
            step 1: sort list based on requested configuration
            step 2: start to remove items from the list.
            </summary>
            <param name="actualCacheSize">Actual size of the cache.</param>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.CacheException">
            <summary>
            Cache Excpetion returned to the client in case the server had a problem.
            The original exception is transferred as innerException
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheException.action">
            <summary>
            the used action
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheException.status">
            <summary>
            the actual status
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheException.Info">
            <summary>
            Gets/sets the Info
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheException.Title">
            <summary>
            Gets/sets the Title
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheException.InnerExceptionMessage">
            <summary>
            Gets/sets the InnerExceptionMessage
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheException.Source">
            <summary>
            Gets/sets the Source
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheException.StackTrace">
            <summary>
            Gets/sets the StackTrace
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.CacheException"/> class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheException.#ctor(System.String,SharedCache.WinServiceCommon.IndexusMessage.ActionValue,SharedCache.WinServiceCommon.IndexusMessage.StatusValue,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.CacheException"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="action">The action.</param>
            <param name="status">The status.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.CacheExpire">
            <summary>
            <b>Manage Data which expires in cache based on provided DateTime</b>
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheExpire._expireTable">
            <summary>
            Defines a dic object with a <see cref="T:System.String"/> and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheExpire.BulkObject">
            <summary>
            defines a bulk <see cref="T:System.Object"/> to manage concurrency.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.CacheExpire.Enable">
            <summary>
            Gets/sets the Enable
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheExpire.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.CacheExpire"/> class.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheExpire.DumpCacheItemAt(System.String,System.DateTime)">
            <summary>
            Dumps the cache item at.
            If key is already available, it will update the expire date and time.
            </summary>
            <param name="key">The key. A <see cref="T:System.String"/> Object.</param>
            <param name="expire">The expire. A <see cref="T:System.DateTime"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheExpire.Clear">
            <summary>
            Clear all items within the expiry table.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheExpire.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key. A <see cref="T:System.String"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheExpire.CheckExpired(System.String)">
            <summary>
            Check if an Item within cache is already expired upon Get Request
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheExpire.GetExpireDateTime(System.String)">
            <summary>
            Check if an Item within cache is already expired upon Get Request
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheExpire.CleanUp">
            <summary>
            Returns a list of <see cref="T:System.String"/> with key's to clean up from 
            the cache.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List&lt;System.String&gt;"/> Object.
            </returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.CacheUtil">
            <summary>
            CacheUtil represents an internal API to communicate with
            Shared Cache and it maintains statistical information
            about various actions. This API is used in client as in server mode.
            Upon replication modus its maintain clients to resend messages to 
            various server nodes based on configuration. The list with 
            configured servers will be used linear.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.compressionEnabled">
            <summary>
            read from configuration if compression is enabled
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.compressionMinSize">
            <summary>
            read from configuration the minimum size of objects which have to be compressed.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.counterAdd">
            <summary>Counts the amount of total added objects per instance</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.counterGet">
            <summary>Counts the amount of total received objects per instance</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.counterRemove">
            <summary>Counts the amount of total removed objects per instance</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.counterStatistic">
            <summary>Counts the amount of statistics calls per instance</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.counterSuccess">
            <summary>count the success get operatiosn</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.counterFailed">
            <summary>Counts the amount of statistics calls per instance</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.counterHitSuccess">
            <summary>counts hit which are available on the server.</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.counterHitFailed">
            <summary>counts failed ret. values when the key is not available anymore.</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.CacheUtil.counterFailedNodeNotAvailable">
            <summary>Parameter counts the amount of calls to disabled server nodes</summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheUtil.HandleProtocol(SharedCache.WinServiceCommon.IndexusMessage,System.String)">
            <summary>
            Handle each protocol message - its like single point of access for every provided possibility
            </summary>
            <param name="msg">A <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/> object.</param>
            <param name="lastUsedServerNodeIp">The last used server node ip, this is mainly used in case of replication configuration.</param>
            <returns>
            the status if communication where sucessfully or if it failed.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheUtil.Ping(System.String)">
            <summary>
            Pings the specified server node based on provided host.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>the status if communication where sucessfully or if it failed.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheUtil.Clear(System.String)">
            <summary>
            Clear cache on provided server node.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>the status if communication where sucessfully or if it failed.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheUtil.GetAllKeys(System.String)">
            <summary>
            Retrieve a List of <see cref="T:System.String"/> of all available key's on specific server node.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>
            the status if communication where sucessfully or if it failed.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheUtil.Add(SharedCache.WinServiceCommon.IndexusMessage)">
            <summary>
            Adding an item to cache.
            </summary>
            <param name="msg">The protocol message as <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/> object.</param>
            <returns>the status if communication where sucessfully or if it failed.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheUtil.Remove(SharedCache.WinServiceCommon.IndexusMessage)">
            <summary>
            Removes the specified MSG.
            </summary>
            <param name="msg">The protocol message as <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/> object.</param>
            <returns>the status if communication where sucessfully or if it failed.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheUtil.Get(SharedCache.WinServiceCommon.IndexusMessage)">
            <summary>
            Gets the specified MSG.
            </summary>
            <param name="msg">The protocol message as <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/> object.</param>
            <returns>the status if communication where sucessfully or if it failed.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheUtil.Statistic(System.String)">
            <summary>
            Receive statistics from server node based on provided host.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>an object of type <see cref="T:SharedCache.WinServiceCommon.IndexusStatistic"/></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.CacheUtil.SetContext(System.Boolean)">
            <summary>
            Set configuration options for client transfers. In case 
            the Cacheutil runs in Client Context it's responsible to
            compress and decompress messages.
            </summary>
            <param name="p">if set to <c>true</c> [p].</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Cleanup">
            <summary>
            This class defines cache items in cache based on various properties 
            and configuration option to clear up memory.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Cleanup.SortingOrder">
            <summary>
            Defines the sorting order of cleanup objects
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Cleanup.SortingOrder.Asc">
            <summary>
            ascending sorting order
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Cleanup.SortingOrder.Desc">
            <summary>
            descending sorting order
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cleanup.Key">
            <summary>
            Gets/sets the Key
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cleanup.Sorting">
            <summary>
            Gets/sets the Sorting
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cleanup.CleanupCacheConfiguration">
            <summary>
            Gets/sets the CleanupCacheConfiguration
            Defines the cleanup cache configuration, the default value is CACHEITEMPRIORITY [check <see cref="T:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp"/> for more information]
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cleanup.Prio">
            <summary>
            Defines the object priority of the cache item.
            Gets/sets the Prio
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cleanup.Span">
            <summary>
            Gets/sets the Span - calculate how much time left until the item 
            will be deleted from the cache.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cleanup.HitRatio">
            <summary>
            Gets/sets the HitRatio
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cleanup.UsageDatetime">
            <summary>
            Gets/sets the UsageDatetime
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cleanup.ObjectSize">
            <summary>
            Gets/sets the ObjectSize
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cleanup.HybridPoint">
            <summary>
            Gets/sets the HybridPoint
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cleanup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Cleanup"/> class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cleanup.#ctor(System.String,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority,System.TimeSpan,System.Int64,System.DateTime,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Cleanup"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="prio">The prio.</param>
            <param name="span">The span.</param>
            <param name="hitRatio">The hit ratio.</param>
            <param name="usageDatetime">The usage datetime.</param>
            <param name="objectSize">Size of the object.</param>
            <param name="hybridPoint">The hybrid point.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cleanup.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cleanup.CompareTo(SharedCache.WinServiceCommon.Cleanup)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cleanup.SortListForCleanup(System.Collections.Generic.List{SharedCache.WinServiceCommon.Cleanup})">
            <summary>
            Sorts the list for cleanup based on the configuration entry it will sort the 
            objects in a correct order to start to delete entries from the cache. Start point
            to delete is always the first object.
            </summary>
            <param name="listToSort">The list to sort, the list contains objects of type <see cref="T:SharedCache.WinServiceCommon.Cleanup"/></param>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Cleanup.CacheItemPriority">
            <summary>
            comparsion based on object priority
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Cleanup.CacheItemTimeSpan">
            <summary>
            Comparsion based on cache item time span
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Cleanup.CacheItemHitRatio">
            <summary>
            Comparsion based on item hit ratio
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Cleanup.CacheItemUsageDateTime">
            <summary>
            Comparsion based on open usage date time
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Cleanup.CacheItemObjectSize">
            <summary>
            Comparsion based on object size
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Cleanup.CacheItemHybridPoints">
            <summary>
            Specific comparsion based on hybrid points.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement">
            <summary>
            Instead of using appSettings all settings are within 
            configuration section.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.SharedCacheVersionNumber">
            <summary>
            Gets or sets the shared cache version number.
            </summary>
            <value>The shared cache version number.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.LoggingEnable">
            <summary>
            Gets or sets if logging is enabled.
            </summary>
            <value>The logging enable.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.CompressionEnabled">
            <summary>
            Gets or sets the if compression is enabled.
            </summary>
            <value>The compression enabled.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.CompressionMinSize">
            <summary>
            Gets or sets the size of the min compression.
            </summary>
            <value>The size of the compression min.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.SocketPoolMinAvailableSize">
            <summary>
            Gets or sets the size of the socket pool min available.
            </summary>
            <value>The size of the socket pool min available.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.SocketPoolTimeout">
            <summary>
            Gets or Sets a value that specifies the amount of time a client contains a open connection to the server before it get dropped.
            </summary>
            <value></value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.SocketPoolValidationInterval">
            <summary>
            Gets or Sets a value that specifies the amount of time a client contains a open connection to the server before it get dropped.
            </summary>
            <value></value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.HashingAlgorithm">
            <summary>
            Gets or sets the hashing algorithm.
            </summary>
            <value>The hashing algorithm.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.EncryptionProviderHashSalt">
            <summary>
            Gets or sets the shared cache version number.
            </summary>
            <value>The shared cache version number.</value>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Client.ClientSettingElement.HashingValidator">
            <summary>
            Validate configured hashing
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSettingCollection">
            <summary>
            Defines the config server setting collection within config file (web.config / app.config)
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSettingCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSetting"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSettingCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSettingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSetting">
            <summary>
            Defines the config elements in config file (web.config / app.config)
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSetting.Key">
            <summary>
            Returns the key value.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSetting.InitializeDefault">
            <summary>
            Used to initialize a default set of values for the <see cref="T:System.Configuration.ConfigurationElement"></see> object.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSetting.IpAddress">
            <summary>
            Returns the setting value for the production environment.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSetting.Port">
            <summary>
            Returns the setting value for the development environment.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection">
            <summary>
            Defines the config section in config file (web.config / app.config)
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection.Servers">
            <summary>
            Gets the servers.
            </summary>
            <value>The servers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection.ReplicatedServers">
            <summary>
            Gets the replicated servers.
            </summary>
            <value>The replicated servers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection.ClientSetting">
            <summary>
            Gets the client settings.
            </summary>
            <value>The client settings.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection.DefaultProvider">
            <summary>
            Gets or sets the default provider, min. 1 server has to be defined.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerProviderSection">
            <summary>
            Defines the config section in config file (web.config / app.config)
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerProviderSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerProviderSection.Servers">
            <summary>
            Gets the servers.
            </summary>
            <value>The servers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerProviderSection.ServerSetting">
            <summary>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerProviderSection.DefaultProvider">
            <summary>
            Gets or sets the default provider, min. 1 server has to be defined.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSetting">
            <summary>
            Defines the config elements in config file (web.config / app.config)
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSetting.Key">
            <summary>
            Returns the key value.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSetting.InitializeDefault">
            <summary>
            Used to initialize a default set of values for the <see cref="T:System.Configuration.ConfigurationElement"></see> object.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSetting.IpAddress">
            <summary>
            Returns the setting value for the production environment.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSetting.Port">
            <summary>
            Returns the setting value for the development environment.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingCollection">
            <summary>
            Defines the config server setting collection within config file (web.config / app.config)
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSetting"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement">
            <summary>
            Define server settings instead of using AppSection
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.SharedCacheVersionNumber">
            <summary>
            Gets or sets the shared cache version number.
            </summary>
            <value>The shared cache version number.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.LoggingEnable">
            <summary>
            Gets or sets if logging is enabled.
            </summary>
            <value>The logging enable.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.ServiceCacheIpPort">
            <summary>
            Gets or sets the service cache ip port.
            </summary>
            <value>The service cache ip port.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.ServiceCacheIpAddress">
            <summary>
            Gets or sets the service cache ip address.
            </summary>
            <value>The service cache ip address.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.ServiceFamilyMode">
            <summary>
            Gets or sets the service family mode.
            </summary>
            <value>The service family mode.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.CacheAmountOfObjects">
            <summary>
            Gets or sets the cache amount of objects.
            </summary>
            <value>The cache amount of objects.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.CacheAmountFillFactorInPercentage">
            <summary>
            Gets or sets the cache amount fill factor in percentage.
            </summary>
            <value>The cache amount fill factor in percentage.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.ServiceCacheCleanupThreadJob">
            <summary>
            Gets or sets the service cache cleanup thread job.
            </summary>
            <value>The service cache cleanup thread job.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.ServiceCacheCleanup">
            <summary>
            Gets or sets the service cache cleanup.
            </summary>
            <value>The service cache cleanup.</value>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.CleanupValidator">
            <summary>
            Validate configured cleanup
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.CleanupValidator.CanValidate(System.Type)">
            <summary>
            Determines whether an object can be validated based on type.
            </summary>
            <param name="type">The object type.</param>
            <returns>
            true if the type parameter value matches the expected type; otherwise, false.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.CleanupValidator.Validate(System.Object)">
            <summary>
            Determines whether the value of an object is valid.
            </summary>
            <param name="value">The object value.</param>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.TcpServerMaxThreadToSet">
            <summary>
            Gets or sets the TCP server max thread to set.
            </summary>
            <value>The TCP server max thread to set.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.TcpServerMinThreadToSet">
            <summary>
            Gets or sets the TCP server min thread to set.
            </summary>
            <value>The TCP server min thread to set.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.SocketPoolTimeout">
            <summary>
            Gets or Sets a value that specifies the amount of time a client contains a open connection to the server before it get dropped.
            </summary>
            <value></value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.SocketPoolValidationInterval">
            <summary>
            Gets or Sets a value that specifies the amount of time a client contains a open connection to the server before it get dropped.
            </summary>
            <value></value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerSettingElement.SocketPoolMinAvailableSize">
            <summary>
            Gets or sets the size of the socket pool min available.
            </summary>
            <value>The size of the socket pool min available.</value>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Extenders.IExpire">
            <summary>
            Defines an interface for Cleanup Options which have to 
            be configured in app.config
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Extenders.IExpire.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Extenders.IExpire.DumpCacheItemAt(System.String,System.Object)">
            <summary>
            Dumps the cache item with specific pattern
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Extenders.IExpire.Remove">
            <summary>
            Remove specified key.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Extenders.IExpire.CleanUp">
            <summary>
            Returns a list of <see cref="T:System.String"/> with key's to clean up from 
            the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Extenders.IInit">
            <summary>
            Defines an interface for Services which has to 
            be started upon Win32 Service start.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Extenders.IInit.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Extenders.IInit.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Extenders.IInit.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Formatters.Compression">
            <summary>
            Makes usage of ICSharpCode.SharepZipLib which is origanlly written 
            by Mike Krueger. Expose functionlity to compress array's of <see cref="T:System.Byte"/>
            and uncompress them. There is also a funktionlity available to validate 
            if the header of the stream indicates it as compressed or not. In case 
            its not compressed the client should not call the Decompress() Method.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Compression.Compress(System.Byte[])">
            <summary>
            Compresses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>a compressed array of <see cref="T:System.Byte"/></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Compression.CheckHeader(System.Byte[])">
            <summary>
            Check the stream header which is returend from the server.
            </summary>
            <param name="value">The value as an array of <see cref="T:System.Byte"/></param>
            <returns>wheater is input is compressed [true] or its not compressed [false]</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Compression.DecodeHeader(SharedCache.WinServiceCommon.Formatters.StreamManipulator)">
            <summary>
            Decodes a zlib/RFC1950 header - to evaluate input if
            decompression is needed or not.
            </summary>
            <param name="input">The input as an object of type <see cref="T:SharedCache.WinServiceCommon.Formatters.StreamManipulator"/></param>
            <returns>wheater is input is compressed [true] or its not compressed [false]</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Compression.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>a decompressed array of <see cref="T:System.Byte"/></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Formatters.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             <remarks>
             has been copied from: http://www.krugle.org/examples/p-zUID3qJxRebp1MBw/StreamManipulator.cs and http://www.icsharpcode.net/CodeReader/SharpZipLib/031/ZipCompressionStreamsStreamManipulator.cs.html
             Copyright (C) 2001 Mike Krueger
             </remarks>
             </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Formatters.StreamManipulator.window">
            <summary>
            an array of <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Formatters.StreamManipulator.window_start">
            <summary>
            <see cref="T:System.Int32"/> where the window starts
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Formatters.StreamManipulator.window_end">
            <summary>
            <see cref="T:System.Int32"/> where the window ends
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Formatters.StreamManipulator.buffer">
            <summary>
            <see cref="T:System.UInt32"/> which indicat the buffer size
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Formatters.StreamManipulator.bits_in_buffer">
            <summary>
            the amount of bits within the buffer as <see cref="T:System.Int32"/> amount
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.StreamManipulator.PeekBits(System.Int32)">
            <summary> 
            Get the next n bits but don't increase input pointer.  n must be 
            less or equal 16 and if you if this call succeeds, you must drop 
            at least n-8 bits in the next call. 
            </summary> 
            <returns> 
            the value of the bits, or -1 if not enough bits available.  */ 
            </returns> 
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.StreamManipulator.DropBits(System.Int32)">
            <summary> 
            Drops the next n bits from the input.  You should have called peekBits 
            with a bigger or equal n before, to make sure that enough bits are in 
            the bit buffer. 
            </summary> 
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.StreamManipulator.GetBits(System.Int32)">
            <summary> 
            Gets the next n bits and increases input pointer.  This is equivalent 
            to peekBits followed by dropBits, except for correct error handling. 
            </summary> 
            <returns> 
            the value of the bits, or -1 if not enough bits available. 
            </returns> 
        </member>
        <member name="P:SharedCache.WinServiceCommon.Formatters.StreamManipulator.AvailableBits">
            <summary> 
            Gets the number of bits available in the bit buffer.  This must be 
            only called when a previous peekBits() returned -1. 
            </summary> 
            <returns> 
            the number of bits available. 
            </returns> 
        </member>
        <member name="P:SharedCache.WinServiceCommon.Formatters.StreamManipulator.AvailableBytes">
            <summary> 
            Gets the number of bytes available. 
            </summary> 
            <returns> 
            the number of bytes available. 
            </returns> 
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.StreamManipulator.SkipToByteBoundary">
            <summary> 
            Skips to the next byte boundary. 
            </summary> 
        </member>
        <member name="P:SharedCache.WinServiceCommon.Formatters.StreamManipulator.IsNeedingInput">
            <summary>
            Gets a value indicating whether this instance is needing input.
            </summary>
            <value>
            	<c>true</c> if this instance is needing input; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> 
            Copies length bytes from input buffer to output buffer starting 
            at output[offset].  You have to make sure, that the buffer is 
            byte aligned.  If not enough bytes are available, copies fewer 
            bytes. 
            </summary> 
            <param name="output"> 
            the buffer. 
            </param> 
            <param name="offset"> 
            the offset in the buffer. 
            </param> 
            <param name="length"> 
            the length to copy, 0 is allowed. 
            </param> 
            <returns> 
            the number of bytes copied, 0 if no byte is available. 
            </returns> 
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.StreamManipulator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Formatters.StreamManipulator"/> class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.StreamManipulator.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.
            </summary>
            <param name="buf">The buf.</param>
            <param name="off">The off.</param>
            <param name="len">The len.</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Formatters.DateTimeUnix">
            <summary>
            To minimize Protocol size the usage of Unix time is needed instead of DateTime which 
            is serialized with the BinarySerializer. representing the number of seconds since 
            Midnight UTC 1 Jan 1970 on the Gregorian Calendar
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Formatters.DateTimeUnix.origin">
            <summary>
            Default unix time
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.DateTimeUnix.DateTimeFromUnixTime(System.Int64)">
            <summary>
            Convert a unix datetime which is represented as long into a .net <see cref="T:System.DateTime"/>
            </summary>
            <param name="timeT">The time T.</param>
            <returns>object of type <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.DateTimeUnix.UnixTimeFromDateTime(System.DateTime)">
            <summary>
            Convert a .net <see cref="T:System.DateTime"/> which represents unix datetime 
            </summary>
            <param name="time">The time.</param>
            <returns>an object of type <see cref="T:System.Int64"/></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Formatters.Serialization">
            <summary>
            <b>Serialization contains a set of Utils for various serilization by usage of Generics</b>
            more information available at: <![CDATA[http://www.codeproject.com/soap/Coreweb03.asp]]>
            <remarks>
            with soap usage you need to add a reference to 
            System.Runtime.Serialization.Formatter.Soap assembly
            </remarks>
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Serialization.BinarySerialize(System.Object)">
            <summary>
            Binaries the serialize.
            </summary>
            <param name="obj">The obj. A <see cref="T:System.Object"/> Object.</param>
            <returns>A <see cref="T:System.Byte[]"/> Object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Serialization.BinaryDeSerialize``1(System.Byte[])">
            <summary>
            Desirializes the given type.
            </summary>
            <param name="serializedObject">The serialized object. A <see cref="T:System.Byte[]"/> Object.</param>
            <returns>A <see cref="T:T"/> Object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Serialization.FileSerialize(System.Object,System.String)">
            <summary>
            Serialize Files
            </summary>
            <param name="obj">The obj. A <see cref="T:System.Object"/> Object.</param>
            <param name="filePath">The file path. A <see cref="T:System.String"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Serialization.FileDeSerialize``1(System.String)">
            <summary>
            deserialize Files
            </summary>
            <param name="filePath">The file path. A <see cref="T:System.String"/> Object.</param>
            <returns>A <see cref="T:T"/> Object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Serialization.SoapMemoryStreamSerialization(System.Object,System.Text.Encoding)">
            <summary>
            SOAPs the memory stream serialization.
            </summary>
            <param name="obj">The obj. A <see cref="T:System.Object"/> Object.</param>
            <param name="encodingType">Type of the encoding.</param>
            <returns>A <see cref="T:System.String"/> Object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Serialization.SoapDeserailization``1(System.String,System.Text.Encoding)">
            <summary>
            SOAP deserailization.
            </summary>
            <param name="input">The input. A <see cref="T:System.String"/> Object.</param>
            <param name="encodingType">Type of the encoding.</param>
            <returns>A <see cref="T:T"/> Object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Serialization.IsSerializable(System.Type)">
            <summary>
            A helper method to identify if the attribute of an object is 
            serializable
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Serialization.DataContractBinarySerialize(System.Object)">
            <summary>
            Binaries the serialize.
            </summary>
            <param name="obj">The obj. A <see cref="T:System.Object"/> Object.</param>
            <returns>A <see cref="T:System.Byte[]"/> Object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Formatters.Serialization.DataContractBinaryDeSerialize``1(System.Byte[])">
            <summary>
            Desirializes the given type.
            </summary>
            <param name="serializedObject">The serialized object. A <see cref="T:System.Byte[]"/> Object.</param>
            <returns>A <see cref="T:T"/> Object.</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Cache">
            <summary>
            Provides generic object cache/pool that based on
            CLR garbage collector (GC) logic.
            </summary>
            <remarks>
            You can extend Cache behaviour in distributed
            environment by lifetime services setting
            of Your classes.
            </remarks>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cache.CalculatedCacheSize">
            <summary>
            Gets/sets the CalculatedCacheSize
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Cache.CacheCleanup">
            <summary>
            Singleton for <see cref="P:SharedCache.WinServiceCommon.Cache.CacheCleanup" />
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Cache.dict">
            <summary>
            The Cache Dictionary which contains all data
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.#ctor">
            <summary>
            Creates an empty Cache.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.#ctor(System.Int32)">
            <summary>
            Creates a Cache with the specified initial size.
            </summary>
            <param name="initialSize">The approximate number of objects that the Cache can initially contain.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.Amount">
            <summary>
            returns the amount this instance contains.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.Size">
            <summary>
            calculates the actual size of this instance.
            <remarks>
            This is a very heavy operation, please consider not to use this to often then 
            it locks the cache exclusivly which is very expensive!!!
            </remarks>
            </summary>
            <returns>a <see cref="T:System.Int64"/> object with the actual Dictionary size</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.GetAllKeys">
            <summary>
            Retrive all key's
            </summary>
            <returns>returns a list with all key's as a <see cref="T:System.String"/> objects.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.Add(System.String,System.Byte[])">
            <summary>
            Adds an object that identified by the provided key to the Cache.
            if the key is already available it will replace it.
            </summary>
            <param name="key">The Object to use as the key of the object to add.</param>
            <param name="value">The Object to add. </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.Add(System.Collections.Generic.KeyValuePair{System.String,System.Byte[]})">
            <summary>
            Adds the specified KeyValuePair
            </summary>
            <param name="kpv">The KPV. A <see cref="T:System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.Insert(System.String,System.Byte[])">
            <summary>
            Inserts the specified key.
            </summary>
            <param name="key">The key. A <see cref="T:System.String"/> Object.</param>
            <param name="value">The value. A <see cref="T:System.Object"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.Get(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>a <see cref="T:System.Object"/> object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.Remove(System.String)">
            <summary>
            Removes the object that identified by the specified key from the Cache.
            </summary>
            <param name="key">The key of the object to remove.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Cache.Clear">
            <summary>
            Removes all objects from the Cache.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Constants">
            <summary>
            <b>Contains app.config constant names, to prevent spelling problems.</b>
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Constants.TRAFFICLOG">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Constants.POSTTRAFFICLOG">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Constants.SYNCENQUEUELOG">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Constants.SYNCDEQUEUELOG">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.EnumUtil`1">
            <summary>
            several Enum Utility methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharedCache.WinServiceCommon.EnumUtil`1.EnumToList``1" -->
        <member name="M:SharedCache.WinServiceCommon.EnumUtil`1.Parse(System.String)">
            <summary>
            Parses the specified string and returns a enum.
            </summary>
            <param name="s">The s.</param>
            <returns>requested enums</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Enums">
            <summary>
            <b>Defines General Enums</b>
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Enums.LogCategory">
            <summary>
            LogCategory Options
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.General">
            <summary>
            General information
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.ServiceStart">
            <summary>
            information upon WinService start
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.ServiceStop">
            <summary>
            information upon WinService stops
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.ServiceRestart">
            <summary>
            information upon WinService restarts
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.ServiceInfo">
            <summary>
            information around the winservice
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.ServiceCleanUpStart">
            <summary>
            cleanup after service started
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.ServiceCleanUpStop">
            <summary>
            cleanup after service stopped
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.Cache_Add">
            <summary>
            adding action information
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.Cache_Remove">
            <summary>
            removing action information
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.Cache_Get">
            <summary>
            retrivel action information
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.Cache_Stat">
            <summary>
            statistical action information
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.LogCategory.Cache_Result">
            <summary>
            after retrival action information
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Enums.Action">
            <summary>
            Defines Action options
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.Action.Stat">
            <summary>
            Statistics
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.Action.Add">
            <summary>
            adding
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.Action.AddWithExpire">
            <summary>
            adding with expire date
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.Action.BeforeGet">
            <summary>
            before data retrival
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.Action.Get">
            <summary>
            normal get retrival
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.Action.Remove">
            <summary>
            remove data
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.Action.Ping">
            <summary>
            ping instance
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.Action.UdpDistribution">
            <summary>
            distributes data over UDP protocol
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp">
            <summary>
            Service Cache CleanUp Pattern options
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp.CACHEITEMPRIORITY">
            <summary>
            Depends on the item priority the items will stay longer in cache, default is Normal <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/>
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp.LRU">
            <summary>
            Least Recent Used, The objects with the oldest requests will be deleted for free memory space
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp.LFU">
            <summary>
            Least Frquently used objects will be deleted for free memory space
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp.TIMEBASED">
            <summary>
            The objects with the smallest time left in cache will be deleted to free memory space
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp.SIZE">
            <summary>
            Delete always biggest objects to free memory space
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp.LLF">
            <summary>
            Delete smallest objects to free memory space
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.ServiceCacheCleanUp.HYBRID">
            <summary>
            a combination with a pointing individual pointing system
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Enums.HashingAlgorithm">
            <summary>
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.HashingAlgorithm.Hashing">
            <summary>
            10
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.HashingAlgorithm.Ketama">
            <summary>
            20
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.HashingAlgorithm.FvnHash32">
            <summary>
            30
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Enums.HashingAlgorithm.FvnHash64">
            <summary>
             40
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Handler.Generic.Util">
            <summary>
            Offers some generic utility methods
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Handler.Generic.Util.SortingOrder">
            <summary>
            Defines the sorting order
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Handler.Generic.Util.SortingOrder.Asc">
            <summary>
            ascending sorting order
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Handler.Generic.Util.SortingOrder.Desc">
            <summary>
            descending sorting order
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Generic.Util.SortDictionaryDesc(System.Collections.Generic.Dictionary{System.String,System.Int64})">
            <summary>
            Sorts the dictionary in Decending order - default
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Generic.Util.SortDictionaryAsc(System.Collections.Generic.Dictionary{System.String,System.Int64})">
            <summary>
            Sorts the dictionary with specific 
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Generic.Util.Sort(System.Collections.Generic.Dictionary{System.String,System.Int64},SharedCache.WinServiceCommon.Handler.Generic.Util.SortingOrder)">
            <summary>
            Sorts the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="sort">The sort.</param>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Handler.LogHandler">
            <summary>
            LogHandler uses to log information with NLog.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.SyncDebugException(System.String,System.Exception)">
            <summary>
            Logging Message and Exception around synchronizing data
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
            <param name="ex">The ex. A <see cref="T:System.Exception"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.SyncDebug(System.String)">
            <summary>
            Logging Message and Exception around synchronizing data
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.SyncInfo(System.String)">
            <summary>
            Logging information around synchronizing data
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.SyncFatal(System.String)">
            <summary>
            Logging Fatal Error Message around synchronizing data
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.SyncFatalException(System.String,System.Exception)">
            <summary>
            Logging Fatal Error Message and Exception around synchronizing data
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
            <param name="ex">The ex. A <see cref="T:System.Exception"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Force(System.String)">
            <summary>
            Force a message, undepend of the Configuration.
            </summary>
            <param name="msg">a <see cref="T:System.String"/> message</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Debug(System.String,System.Exception)">
            <summary>
            Debugs the specified MSG.
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
            <param name="ex">The ex. A <see cref="T:System.Exception"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Debug(System.String)">
            <summary>
            Debugs the specified MSG.
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Info(System.String,System.Exception)">
            <summary>
            Infoes the specified MSG.
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
            <param name="ex">The ex. A <see cref="T:System.Exception"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Info(System.String)">
            <summary>
            Infoes the specified MSG.
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Fatal(System.String,System.Exception)">
            <summary>
            Fatals the specified MSG.
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
            <param name="ex">The ex. A <see cref="T:System.Exception"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Fatal(System.String)">
            <summary>
            Fatals the specified MSG.
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Error(System.String,System.Exception)">
            <summary>
            Errors the specified MSG.
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
            <param name="ex">The ex. A <see cref="T:System.Exception"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Error(System.String)">
            <summary>
            Errors the specified MSG.
            </summary>
            <param name="msg">The MSG. A <see cref="T:System.String"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Error(System.Exception)">
            <summary>
            Errors the specified ex.
            </summary>
            <param name="ex">The ex. A <see cref="T:System.Exception"/> Object.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.TrafficException(System.String,System.Exception)">
            <summary>
            Traffic exceptions.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Traffic(System.String)">
            <summary>
            Adding Traffic messages to log
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.TrackingException(System.String,System.Exception)">
            <summary>
            Tracking exception and a message.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.Tracking(System.String)">
            <summary>
            Trackings the specified MSG.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.MemoryFatalException(System.String)">
            <summary>
            Logs the Memory fatal message.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.MemoryFatalException(System.String,System.Exception)">
            <summary>
            Logs the Memory fatal exception.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.LogHandler.MemoryDebug(System.String)">
            <summary>
            Memories the debug.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Handler.Network">
            <summary>
            Provides various centralised Network methods.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Network.GetIPHostEntry">
            <summary>
            Gets the IP host entry.
            </summary>
            <returns>A <see cref="T:System.Net.IPHostEntry"/> object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Network.GetFirstIPAddress">
            <summary>
            Gets the first IP address.
            </summary>
            <returns>A <see cref="T:System.Net.IPAddress"/> object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Network.GetIPEndPoint(System.Int32)">
            <summary>
            Gets the IP end point.
            </summary>
            <param name="port">The port.</param>
            <returns>a <see cref="T:System.Net.IPEndPoint"/> object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Network.GetServerAnyIPEndPoint(System.Int32)">
            <summary>
            Gets the server any IP end point.
            </summary>
            <param name="port">The port.</param>
            <returns>a <see cref="T:System.Net.IPEndPoint"/> object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Network.EvaluateLocalIPAddress(System.String)">
            <summary>
            Evaluates the local IP address and filters known aliases like localhost, local, *, 127.0.0.1, ? 
            This is used to prevent to replicated data to same server node
            </summary>
            <param name="hostname">The hostname.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Network.IPAddressFromHostName(System.String)">
            <summary>
            IPs the name of the address from host.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Handler.NetworkMessage">
            <summary>
            <b>NetworkMessage is a Network handler of <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/> objects based
            which are received over the passed Socket.</b>
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Handler.NetworkMessage.bulkObject">
            <summary>
            defines a bulk <see cref="T:System.Object"/> to manage concurrency.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Handler.NetworkMessage.countTransferDataToServer">
            <summary>
            defines a counter for the amount of data 
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Handler.NetworkMessage.countTransferDataFromServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.NetworkMessage.IncToServer(System.Int64)">
            <summary>
            Increment the byte amount which sent to server.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.NetworkMessage.IncFromServer(System.Int64)">
            <summary>
            Increment the byte amount which is received from server.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Handler.Unique">
            <summary>
            Createing a process wide Unique ID
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Handler.Unique.lastId">
            <summary>
            last used ID
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.Unique.NextUniqueId">
            <summary>
            Nexts the unique id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Handler.UtilByte">
            <summary>
            Byte Helper class
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.UtilByte.CreateMessageHeader(System.Byte[])">
            <summary>
            Creates the message header.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Handler.UtilByte.Combine(System.Byte[],System.Byte[])">
            <summary>
            Combines the specified byte1.
            </summary>
            <param name="byte1">The byte1.</param>
            <param name="byte2">The byte2.</param>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Hashing.FnvHash32">
            <summary>
            Enables a charsequence with the capability to produce a Fowler-Noll-Vo (FNV) 32-bit hashcode
            FNV hashes are desigend to be fast while maintaining a low collision rate. The FNV speed
            allows one to quickly hash lots of data while maintaining a reasonable collision rate. 
            The high dispersion of the FNV hashes makes them well suited for hashing nearly identical string such
            as URL's hostnames, filesnames, text, IP Addresses and others.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Hashing.FnvHash32.FnvInitializeValue">
            <summary>
            represent a initial value
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Hashing.FnvHash32.FnvPrincipalValue">
            <summary>
            prinzipal value
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Hashing.FnvHash32.hashValue">
            <summary>
            represent the actual value
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.FnvHash32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Hashing.FnvHash64"/> class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.FnvHash32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.FnvHash32.HashFinal">
            <summary>
            When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.FnvHash32.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm"></see> class.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Hashing.FnvHash64">
            <summary>
            Enables a charsequence with the capability to produce a Fowler-Noll-Vo (FNV) 64-bit hashcode
            FNV hashes are desigend to be fast while maintaining a low collision rate. The FNV speed
            allows one to quickly hash lots of data while maintaining a reasonable collision rate. 
            The high dispersion of the FNV hashes makes them well suited for hashing nearly identical string such
            as URL's hostnames, filesnames, text, IP Addresses and others.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Hashing.FnvHash64.FnvInitializeValue">
            <summary>
            represent a initial value
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Hashing.FnvHash64.FnvPrincipalValue">
            <summary>
            prinzipal value
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Hashing.FnvHash64.hashValue">
            <summary>
            represent the actual value
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.FnvHash64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Hashing.FnvHash64"/> class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.FnvHash64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.FnvHash64.HashFinal">
            <summary>
            When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.FnvHash64.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm"></see> class.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Hashing.Hash">
            <summary>
            Generates Hash Key;
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.Hash.Generate(System.String,System.Int32)">
            <summary>
            Generates specified hash on the key based on the amount of defined servers in *.config file.
            </summary>
            <param name="key">The key which is used to identify.</param>
            <param name="serverAmount">The server amount which are configured.</param>
            <returns>The specific server, as a number.</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Hashing.Ketama">
            <summary>
            MD5 Based consistent hashing
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Hashing.Ketama.bulkObject">
            <summary>
            Lock code operation
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Hashing.Ketama.hash">
            <summary>
            create MD5 Hash
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Hashing.Ketama.Generate(System.String)">
            <summary>
            Gets the hash for given key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpContextHelper">
            <summary>
            Encapsulates all HTTP-specific information about an individual HTTP request.
            The code of HttpContext Helper on this page has been taken from (Ryan Olshan):
            http://community.strongcoders.com/blogs/ryan/archive/2005/12/25/httpcontext-helper.aspx
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpContextHelper.CurrentApplication">
            <summary>
            Gets the System.Web.HttpApplicationState object for the current HTTP request.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpContextHelper.CurrentCache">
            <summary>
            Gets the System.Web.Caching.Cache object for the current HTTP request.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpContextHelper.CurrentRequest">
            <summary>
            Gets the System.Web.HttpRequest object for the current HTTP request.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpContextHelper.CurrentResponse">
            <summary>
            Gets the System.Web.HttpResponse object for the current HTTP response.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpContextHelper.CurrentServer">
            <summary>
            Gets the System.Web.HttpServerUtility object that provides methods used in
            processing Web requests.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpContextHelper.CurrentSession">
            <summary>
            Gets the System.Web.SessionState.HttpSessionState object for the current
            HTTP request.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpHandlers.CacheViewHandler">
            <summary>
            This class is an HttpHandler and reports on the ASP.NET Cache
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.CacheViewHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Standard HttpHandler Entry point. Coordinate the displaying of the Cache View
            </summary>
            <param name="context">The current HttpContext</param>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpHandlers.CacheViewHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.
            </returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpHandlers.Common">
            <summary>
            Summary description for Common.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.Common.RequestIsLocal(System.Web.HttpRequest)">
            <summary>
            Check if curremt request originated locally
            </summary>
            <param name="request">The current HttpRequest</param>
            <returns>True if the request originated locally</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.Common.BinarySerialize(System.Object)">
            <summary>
            Serilaize object into a memory stream using Binary Serialization
            </summary>
            <param name="objectToSerialize">object to serialize</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.Common.XmlSerialize(System.Object)">
            <summary>
            Serialize object into StringWriter using XmlSerialization
            </summary>
            <param name="objectToSerialize">object to serialize</param>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpHandlers.HttpHandlersConfig">
            <summary>
            Summary description for ConfigSettings.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpHandlers.HttpHandlersConfig.SessionView">
            <summary>
            Gets the setting for is the restriction on pages being bookmarkable On or Off by default
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpHandlers.HttpHandlersConfig.CacheView">
            <summary>
            Gets the setting for a Namespace to try and load Pages from
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpHandlers.SessionViewSettings">
            <summary>
            SessionViewSettings
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpHandlers.CacheViewSettings">
            <summary>
            CacheViewSettings
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpHandlers.StateViewerSettings">
            <summary>
            StateViewerSettings
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.HttpHandlers.StateViewerSettings.enabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.HttpHandlers.StateViewerSettings.showViewDataLink">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpHandlers.StateViewerSettings.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SharedCache.WinServiceCommon.HttpHandlers.StateViewerSettings"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpHandlers.StateViewerSettings.ShowViewDataLink">
            <summary>
            Gets a value indicating whether [show view data link].
            </summary>
            <value><c>true</c> if [show view data link]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpHandlers.HttpHandlersConfigHandler">
            <summary>
            Summary description for CustomConfigHandler.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.HttpHandlersConfigHandler.#ctor">
            <summary></summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.HttpHandlersConfigHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpHandlers.SessionViewHandler">
            <summary>
            This class is an HttpHandler and reports on ASP.NET Session State
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.SessionViewHandler.#ctor">
            <summary>
             Public Constructor
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.SessionViewHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Standard HttpHandler Entry point. Coordinate the displaying of the Session View
            </summary>
            <param name="context">The current HttpContext</param>
        </member>
        <member name="P:SharedCache.WinServiceCommon.HttpHandlers.SessionViewHandler.IsReusable">
            <summary>
            Gets the bool saying whether this HttpHandler is Reusable or not
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.SessionViewHandler.BinaryWrite(System.Object)">
            <summary>
            
            </summary>
            <param name="valueToWrite"></param>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.HttpHandlers.TableHelper">
            <summary>
            Helper class used when building up the Html tables for display
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.TableHelper.AddCell(System.Web.UI.WebControls.TableRow,System.String)">
            <summary>
            Adds the cell.
            </summary>
            <param name="rowToAddCellTo">The row to add cell to.</param>
            <param name="cellText">The cell text.</param>
            <returns>A TableCell</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.TableHelper.AddCell(System.Web.UI.WebControls.TableRow,System.String,System.String)">
            <summary>
            Adds the cell.
            </summary>
            <param name="rowToAddCellTo">The row to add cell to.</param>
            <param name="cellText">The cell text.</param>
            <param name="hyperLink">The hyper link.</param>
            <returns>A TableCell</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.TableHelper.AddHeaderCell(System.Web.UI.WebControls.TableRow,System.String)">
            <summary>
            Adds the header cell.
            </summary>
            <param name="rowToAddCellTo">The row to add cell to.</param>
            <param name="cellText">The cell text.</param>
            <returns>A TableCell</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.HttpHandlers.TableHelper.CreateTable">
            <summary>
            Creates the table.
            </summary>
            <returns>A Table</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.IndexusMessage">
            <summary>
            IndexusMessage
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.IndexusMessage.StatusValue">
            <summary>
            public enum StatusValue
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.StatusValue.Request">
            <summary>
            Defines Request method
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.StatusValue.Response">
            <summary>
            Defines Response method
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.StatusValue.ReplicationRequest">
            <summary>
            Defines replication request handling - this is defined for server to server messages
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.IndexusMessage.ActionValue">
            <summary>
            public enum ActionValue
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.Add">
            <summary>
            Adding value to cache.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.Get">
            <summary>
            Retrive data from cache
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.GetAllKeys">
            <summary>
            get all keys from cache
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.Remove">
            <summary>
            remove data from cache
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.Statistic">
            <summary>
            get statistic from cache
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.Error">
            <summary>
            defines an error appears
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.Successful">
            <summary>
            sussessfully transmission
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.Ping">
            <summary>
            pings a server
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.RemoveAll">
            <summary>
            remove all items at once from cache
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.MultiGet">
            <summary>
            Get a bunch of data without any relation between the items.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.MultiAdd">
            <summary>
            Adding a bunch of data without any relation between the items.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.MultiDelete">
            <summary>
            Delete a bunch of data without any relation between the items.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.RegexRemove">
            <summary>
            Executing a regular expression on the server key's and remove all 
            matches with one single call.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.RegexGet">
            <summary>
            Receive a bunch of data where key's where item keys 
            are matching pattern
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.ExtendTtl">
            <summary>
            Modify item attribute expires within cache node.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.VersionNumberClr">
            <summary>
            Identify CLR (Common Language Runtime) Version number, e.g. 2.0.50727.3053 / 2.0.50727.1433
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.VersionNumberSharedCache">
            <summary>
            Identify Shared Cache Version Number, e.g.: 2.0.4.276, 2.0.4.277, 2.0.4.278, etc
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ActionValue.GetAbsoluteTimeExpiration">
            <summary>
            Request to receive absolut expiration <see cref="T:System.DateTime"/> for cached objects.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority">
            <summary>
            Specifies the relative priority of items stored in the Cache object <see cref="T:SharedCache.WinServiceCommon.Cache"/>
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority.Low">
            <summary>
            Cache items with this priority level are the most likely to be deleted from the cache as the server frees system memory.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority.BelowNormal">
            <summary>
            Cache items with this priority level are more likely to be deleted from the cache as the server frees system memory than items assigned a Normal priority.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority.Normal">
            <summary>
            Cache items with this priority level are likely to be deleted from the cache as the server frees system memory only after those items with Low or BelowNormal priority. This is the default.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority.AboveNormal">
            <summary>
            Cache items with this priority level are less likely to be deleted as the server frees system memory than those assigned a Normal priority.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority.High">
            <summary>
            Cache items with this priority level are the least likely to be deleted from the cache as the server frees system memory.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority.None">
            <summary>
            Do not modify anything, used upon attribute extensios.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusMessage.ClientContext">
            <summary>
            this property is not sent over the wire its used to evaluate in which context the message runs
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusMessage.Id">
            <summary>
            Gets/sets the Id
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusMessage.Status">
            <summary>
            Gets/sets the Status
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusMessage.Action">
            <summary>
            Gets/sets the Action
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusMessage.ItemPriority">
            <summary>
            Gets/sets the ItemPriority
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusMessage.Key">
            <summary>
            Gets/sets the Key
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusMessage.Payload">
            <summary>
            Gets/sets the Payload
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusMessage.Expires">
            <summary>
            Gets/sets the Expires
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusMessage.Hostname">
            <summary>
            Gets/sets the Hostname
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusMessage.Timestamp">
            <summary>
            Gets/sets the Timestamp
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/> class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.#ctor(System.Int64,SharedCache.WinServiceCommon.IndexusMessage.ActionValue)">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.#ctor(System.Int64,SharedCache.WinServiceCommon.IndexusMessage.StatusValue,SharedCache.WinServiceCommon.IndexusMessage.ActionValue,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority,System.String,System.DateTime,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="status">The status.</param>
            <param name="action">The action.</param>
            <param name="priority">The priority.</param>
            <param name="host">The host.</param>
            <param name="expires">The expires.</param>
            <param name="key">The key.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.Send">
            <summary>
            Sends this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.Copy(SharedCache.WinServiceCommon.IndexusMessage)">
            <summary>
            Copies the specified MSG.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.SetBytes(System.IO.MemoryStream)">
            <summary>
            Sets the bytes.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.GetBytes">
            <summary>
            Gets the bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusMessage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.ServerStats">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.ServerStats.Name">
            <summary>
            Gets/sets the Name
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.ServerStats.AmountOfObjects">
            <summary>
            Gets/sets the AmountOfObjects
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.ServerStats.CacheSize">
            <summary>
            Gets/sets the CacheSize
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.ServerStats.UsageList">
            <summary>
            Gets/sets the Long> NodeUsageList
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.ServerStats.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.ServerStats.#ctor(System.String,System.Int64,System.Int64,System.Collections.Generic.Dictionary{System.String,System.Int64})">
            <summary>
            </summary>
            <param name="nodeName"></param>
            <param name="nodeAmountOfObjects"></param>
            <param name="nodeSize"></param>
            <param name="nodeUsageList"></param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.IndexusStatistic">
            <summary>
            Contains statistical information
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ApiHitSuccess">
            <summary>
            Gets the API hit success.
            </summary>
            <value>The API hit success.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ApiHitFailed">
            <summary>
            Gets the API hit failed.
            </summary>
            <value>The API hit failed.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ApiCounterAdd">
            <summary>
            Gets the API counter add.
            </summary>
            <value>The API counter add.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ApiCounterGet">
            <summary>
            Gets the API counter get.
            </summary>
            <value>The API counter get.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ApiCounterRemove">
            <summary>
            Gets the API counter remove.
            </summary>
            <value>The API counter remove.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ApiCounterStatistic">
            <summary>
            Gets the API counter statistic.
            </summary>
            <value>The API counter statistic.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ApiCounterSuccess">
            <summary>
            Gets the API counter success.
            </summary>
            <value>The API counter success.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ApiCounterFailed">
            <summary>
            Gets the API counter failed.
            </summary>
            <value>The API counter failed.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ApiCounterFailedNodeNotAvailable">
            <summary>
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusStatistic.NodeDate">
            <summary>
            Contains server information fore specific node
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusStatistic.serviceAmountOfObjects">
            <summary>the amount of objects the service contains.</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusStatistic.serviceTotalSize">
            <summary>current total RAM which is needed.</summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.IndexusStatistic.serviceUsageList">
            <summary>enables possibility to receive the usage of cache items</summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IndexusStatistic"/> class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusStatistic.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:IndexusStatistic"/> class.
            </summary>
            <param name="add">The add. A <see cref="T:System.Int64"/> Object.</param>
            <param name="get">The get. A <see cref="T:System.Int64"/> Object.</param>
            <param name="remove">The remove. A <see cref="T:System.Int64"/> Object.</param>
            <param name="stat">The stat. A <see cref="T:System.Int64"/> Object.</param>
            <param name="failed">The failed.</param>
            <param name="success">The success.</param>
            <param name="amount">The amount. A <see cref="T:System.Int64"/> Object.</param>
            <param name="srvSize">Size of the SRV.</param>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.GetHitRatio">
            <summary>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ServiceAmountOfObjects">
            <summary>
            Gets or sets the service amount of objects.
            </summary>
            <value>The service amount of objects.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ServiceTotalSize">
            <summary>
            Gets or sets the total size of the service.
            </summary>
            <value>The total size of the service.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.IndexusStatistic.ServiceUsageList">
            <summary>
            Gets/sets the ServiceUsageList
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusStatistic.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.IndexusStatistic.ToNotify">
            <summary>
            Same like ToString, used within Notify Application
            </summary>
            <returns>A formatted <see cref="T:System.String"/> object.</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Ports">
            <summary>
            <b>Retrives fixed ports which are defined in configuration file</b>
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Ports.ServerDefaultPortTcp">
            <summary>
            TCP Ports.
            </summary>
            <returns>A <see cref="T:System.Int32"/> Object.</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache">
            <summary>
            Loading defined providers in config files (web.config / app.config)
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache.#cctor">
            <summary>
            Initializes the <see cref="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache"/> class.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache.BulkObject">
            <summary>
            prevents concurrent usage of data
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache._providerBase">
            <summary>
            a static <see cref="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase"/> to load configured data.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache._providerCollection">
            <summary>
            a static <see cref="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderCollection"/> to load configured data.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache._providerSection">
            <summary>
            a static <see cref="T:SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection"/> to load configured data.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache.SharedCache">
            <summary>
            Gets the current provider.
            </summary>
            <value>The current provider.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache.ProviderSection">
            <summary>
            Gets the provider section.
            </summary>
            <value>The provider section.</value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusDistributionCache.LoadProvider">
            <summary>
            Loads the provider which is configured in applicaiton config file (app.config / web.config)
            <example>
            <![CDATA[<?xml version="1.0" encoding="utf-8" ?>]]>
            <configSections>
            <section name="indexusNetSharedCache" type="SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection, SharedCache.WinServiceCommon" />
            </configSections>
            
            <indexusNetSharedCache defaultProvider="IndexusSharedCacheProvider">
            	<servers>
            	   <add key="Server1"	ipaddress="10.0.0.3" port="48888" />
            	   <add key="Server2"	ipaddress="10.0.0.4" port="48888" />
            	</servers>
            	<providers>
            	   <add
            	     name="IndexusSharedCacheProvider"
            	     type="SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider, SharedCache.WinServiceCommon" />
            	 </providers>
            </indexusNetSharedCache>
            </example>
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase">
            <summary>
            Implements the provider base for Shared Cache, based on Microsoft Provider Model.
            <example>
            <![CDATA[<?xml version="1.0" encoding="utf-8" ?>]]>
            <configSections>
            <section name="indexusNetSharedCache" type="SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection, SharedCache.WinServiceCommon" />
            </configSections>
            
            <indexusNetSharedCache defaultProvider="IndexusSharedCacheProvider">
            	<servers>
            	   <add key="Server1"	ipaddress="10.0.0.3" port="48888" />
            	   <add key="Server2"	ipaddress="10.0.0.4" port="48888" />
            	</servers>
            	<providers>
            	   <add
            	     name="IndexusSharedCacheProvider"
            	     type="SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider, SharedCache.WinServiceCommon" />
            	 </providers>
            </indexusNetSharedCache>
            </example>
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractAdd(System.String,System.Object)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and 
            DateTime.MaxValue. Items are only get cleared from cache in case 
            max. cache factor arrived or the cache get refreshed.
            </summary>
            <remarks>
            Data which is add with DataContractXxx() Methods need to receive Data from cache with DataContractGetXxx() Methods.
            </remarks>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractAdd(System.String,System.Object,System.DateTime)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and 
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case 
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items
            with provided <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
            Data which is add with DataContractXxx() Methods need to receive Data from cache with DataContractGetXxx() Methods.
            </remarks>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractAdd(System.String,System.Object,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and 
            DateTime.MaxValue. Items are only get cleared from cache in case max. cache factor arrived or the cache get refreshed.
            </summary>
            <remarks>
            Data which is add with DataContractXxx() Methods need to receive Data from cache with DataContractGetXxx() Methods.
            </remarks>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractAdd(System.String,System.Object,System.String)">
            <summary>
            Adding an item to specific cache node. It let user to control on which server node the item will be placed. 
            Items are added with normal priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and 
            DateTime.MaxValue <see cref="T:System.DateTime"/>. Items are only get cleared from cache in case max. cache factor 
            arrived or the cache get refreshed.
            </summary>
            <remarks>
            Data which is add with DataContractXxx() Methods need to receive Data from cache with DataContractGetXxx() Methods.
            </remarks>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="host">The host represents the ip address of a server node.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractAdd(System.String,System.Object,System.DateTime,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and 
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case 
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items with provided <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
            Data which is add with DataContractXxx() Methods need to receive Data from cache with DataContractGetXxx() Methods.
            </remarks>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractGet``1(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <remarks>
            Data need to be added to cache over DataContractAdd() methods otherwise the application throws an exception.
            </remarks>
            <remarks>
            Data which is add with DataContractXxx() Methods need to receive Data from cache with DataContractGetXxx() Methods.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="key">The key for cache item</param>
            <returns>Returns received item as casted object T</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractGet(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <remarks>
            Data need to be added to cache over DataContractAdd() methods otherwise the application throws an exception.
            </remarks>
            <param name="key">The key for cache item</param>
            <returns>Returns received item as casted <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractMultiAdd(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Adding a bunch of data to the cache, prevents to make several calls
            from the client to the server. All data is tranported with 
            a <see cref="T:System.Collections.IDictionary"/> with a <see cref="T:System.String"/> and <see cref="T:System.Byte"/> 
            array combination.
            </summary>
            <param name="data">The data to add as a <see cref="T:System.Collections.IDictionary"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractMultiGet(System.Collections.Generic.List{System.String})">
            <summary>
            Based on a list of key's the client receives a dictonary with 
            all available data depending on the keys.
            </summary>
            <remarks>
            Data need to be added to cache over DataContractAdd() methods otherwise the application throws an exception.
            </remarks>
            <param name="keys">A List of <see cref="T:System.String"/> with all requested keys.</param>
            <returns>A <see cref="T:System.Collections.IDictionary"/> with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array element.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.DataContractRegexGet(System.String)">
            <summary>
            Returns items from cache node based on provided pattern.
            </summary>
            <remarks>
            Data need to be added to cache over DataContractAdd() methods otherwise the application throws an exception.
            </remarks>
            <param name="regularExpression">The regular expression.</param>
            <returns>An IDictionary with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array with all founded elementes</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Byte[],System.DateTime,SharedCache.WinServiceCommon.IndexusMessage.ActionValue,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority,SharedCache.WinServiceCommon.IndexusMessage.StatusValue,System.String)">
            <summary>
            Adding an item to cache with all possibility options. All overloads are using this 
            method to add items based on various provided variables. e.g. expire date time, 
            item priority or to a specific host
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
            <param name="action">The action is always Add item to cache. See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.ActionValue"/> options.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
            <param name="status">The status of the request. See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.StatusValue"/></param>
            <param name="host">The host, represents the specific server node.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Object)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and 
            DateTime.MaxValue. Items are only get cleared from cache in case 
            max. cache factor arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Byte[])">
            <summary>
            Adding an item to cache. Items are added with Normal priority and 
            DateTime.MaxValue. Items are only get cleared from cache in case 
            max. cache factor arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Object,System.DateTime)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and 
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case 
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items
            with provided <see cref="T:System.DateTime"/>.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Byte[],System.DateTime)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and 
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case 
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items
            with provided <see cref="T:System.DateTime"/>.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Object,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and 
            DateTime.MaxValue. Items are only get cleared from cache in case max. cache factor arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Byte[],SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and 
            DateTime.MaxValue. Items are only get cleared from cache in case max. cache factor arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Object,System.String)">
            <summary>
            Adding an item to specific cache node. It let user to control on which server node the item will be placed. 
            Items are added with normal priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and 
            DateTime.MaxValue <see cref="T:System.DateTime"/>. Items are only get cleared from cache in case max. cache factor 
            arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="host">The host represents the ip address of a server node.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Byte[],System.String)">
            <summary>
            Adding an item to specific cache node. It let user to control on which server node the item will be placed. 
            Items are added with normal priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and 
            DateTime.MaxValue <see cref="T:System.DateTime"/>. Items are only get cleared from cache in case max. cache factor 
            arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="host">The host represents the ip address of a server node.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Object,System.DateTime,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and 
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case 
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items with provided <see cref="T:System.DateTime"/>.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Add(System.String,System.Byte[],System.DateTime,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and 
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case 
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items with provided <see cref="T:System.DateTime"/>.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.ExtendTtl(System.String,System.DateTime)">
            <summary>
            This Method extends items time to live.
            </summary>
            <remarks>WorkItem Request: http://www.codeplex.com/SharedCache/WorkItem/View.aspx?WorkItemId=6129</remarks>
            <param name="key">The key for cache item</param>
            <param name="expires">Identify when item will expire from the cache.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Remove(System.String)">
            <summary>
            Remove cache item with provided key. 
            </summary>
            <param name="key">The key for cache item</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Get``1(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key for cache item</param>
            <returns>Returns received item as casted object T</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.GetBinary(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key for cache item</param>
            <returns>Returns received item as casted object T</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Get(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <param name="key">The key for cache item</param>
            <returns>Returns received item as casted <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.MultiGet(System.Collections.Generic.List{System.String})">
            <summary>
            Based on a list of key's the client receives a dictonary with 
            all available data depending on the keys.
            </summary>
            <param name="keys">A List of <see cref="T:System.String"/> with all requested keys.</param>
            <returns>A <see cref="T:System.Collections.IDictionary"/> with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array element.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.MultiAdd(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Adding a bunch of data to the cache, prevents to make several calls
            from the client to the server. All data is tranported with
            a <see cref="T:System.Collections.Generic.IDictionary`2"/> with a <see cref="T:System.String"/> and <see cref="T:System.Byte"/>
            array combination.
            </summary>
            <param name="data">The data to add as a <see cref="T:System.Collections.IDictionary"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.MultiDelete(System.Collections.Generic.List{System.String})">
            <summary>
            Delete a bunch of data from the cache. This prevents several calls from 
            the client to the server. Only one single call is done with all relevant 
            key's for the server node.
            </summary>
            <param name="keys">A List of <see cref="T:System.String"/> with all requested keys to delete</param>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Count">
            <summary>
            Retrieve amount of configured server nodes.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Servers">
            <summary>
            Retrieve configured server nodes as an array of <see cref="T:System.String"/>
            </summary>
            <value>The servers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.ServersList">
            <summary>
            Retrieve configured server nodes configuration as a <see cref="T:System.Collections.Generic.List`1"/>. This 
            is provides the Key and IPAddress of each item in the configuration section.
            </summary>
            <value>The servers list.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.ReplicatedServers">
            <summary>
            Retrieve replication server nodes configuration as an array of <see cref="T:System.String"/>. This 
            is provides the Key and IPAddress of each item in the configuration section.
            </summary>
            <value>An array of <see cref="T:System.String"/> with all configured replicated servers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.ReplicatedServersList">
            <summary>
            Retrieve replication server nodes configuration as a <see cref="T:System.Collections.Generic.List`1"/>. This 
            is provides the Key and IPAddress of each item in the configuration section.
            </summary>
            <value>A List of <see cref="T:System.String"/> with all configured replicated servers.</value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Clear">
            <summary>
            Force each configured cache server node to clear the cache.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.GetStats">
            <summary>
            Retrieve all statistic information <see cref="T:SharedCache.WinServiceCommon.IndexusStatistic"/> from each configured 
            server as one item.
            </summary>
            <returns>an aggrigated <see cref="T:SharedCache.WinServiceCommon.IndexusStatistic"/> object with all server statistics</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.GetStats(System.String)">
            <summary>
            Retrieve statistic information <see cref="T:SharedCache.WinServiceCommon.IndexusStatistic"/> from specific  
            server based on provided host.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>an <see cref="T:SharedCache.WinServiceCommon.IndexusStatistic"/> object</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.GetServerForKey(System.String)">
            <summary>
            Evaluate the correct server node for provided key.
            </summary>
            <param name="key">The key for cache item</param>
            <returns>returns the correct server for provided key</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.GetAllKeys">
            <summary>
            Retrieve a list with all key which are available on cache.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of strings with all available keys.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.GetAllKeys(System.String)">
            <summary>
            Retrieve a list with all key which are available on all cofnigured server nodes.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of strings with all available keys.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.Ping(System.String)">
            <summary>
            Pings the specified host.
            </summary>
            <param name="host">The host.</param>
            <returns>if the server is available then it returns true otherwise false.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.RegexRemove(System.String)">
            <summary>
            Remove Cache Items on server node based on regular expression. Each item which matches
            will be automatically removed from each server.
            </summary>
            <param name="regularExpression">The regular expression.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.RegexGet(System.String)">
            <summary>
            Returns items from cache node based on provided pattern.
            </summary>
            <param name="regularExpression">The regular expression.</param>
            <returns>An IDictionary with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array with all founded elementes</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.ServerNodeVersionClr">
            <summary>
            Return Servers CLR (Common Language Runtime), this is needed to decide which 
            Hashing codes can be used.
            </summary>
            <returns>CLR (Common Language Runtime) version number as <see cref="T:System.String"/> e.g. xxxx.xxxx.xxxx.xxxx</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.ServerNodeVersionSharedCache">
            <summary>
            Returns current build version of Shared Cache
            </summary>
            <returns>Shared Cache version number as <see cref="T:System.String"/> e.g. xxxx.xxxx.xxxx.xxxx</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase.GetAbsoluteTimeExpiration(System.Collections.Generic.List{System.String})">
            <summary>
            Gets the absolute time expiration of items within cache nodes
            </summary>
            <param name="keys">A list with keys of type <see cref="T:System.String"/></param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> were each key has its expiration absolute DateTime</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderCollection">
            <summary>
            Represents a collection of provider objects that inherit from System.Configuration.Provider.ProviderCollection
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Adds a provider to the base provider collection and makes it available.
            </summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.ArgumentException">The <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> of provider is null.- or -The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> of provider is less than 1.</exception>
            <exception cref="T:System.ArgumentNullException">provider is null.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/></PermissionSet>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider">
            <summary>
            Implementing a provider for Shared Cache based on
            Microsofts Provider model.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider"/> class.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.MultiGetKey">
            <summary>
            For multi get no specific key is required so 
            use a constant to represent the key value.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.serverIp">
            <summary>
            a list which represents only configured server node ip addresses.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.serverList">
            <summary>
            A list of all available server <see cref="T:SharedCache.WinServiceCommon.Configuration.Client.IndexusServerSetting"/> configured nodes
            with the provided key.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Count">
            <summary>
            Retrieve amount of configured server nodes.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Servers">
            <summary>
            Retrieve configured server nodes as an array of <see cref="T:System.String"/>
            </summary>
            <value>The servers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.ServersList">
            <summary>
            Retrieve configured server nodes configuration as a <see cref="T:System.Collections.Generic.List`1"/>. This
            is provides the Key and IPAddress of each item in the configuration section.
            </summary>
            <value>The servers list.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.ReplicatedServers">
            <summary>
            Retrieve replication server nodes configuration as an array of <see cref="T:System.String"/>. This
            is provides the Key and IPAddress of each item in the configuration section.
            </summary>
            <value>
            An array of <see cref="T:System.String"/> with all configured replicated servers.
            </value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.ReplicatedServersList">
            <summary>
            Retrieve replication server nodes configuration as a <see cref="T:System.Collections.Generic.List`1"/>. This
            is provides the Key and IPAddress of each item in the configuration section.
            </summary>
            <value>
            A List of <see cref="T:System.String"/> with all configured replicated servers.
            </value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Hashing">
            <summary>
            Gets the Hashing
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Byte[],System.DateTime,SharedCache.WinServiceCommon.IndexusMessage.ActionValue,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority,SharedCache.WinServiceCommon.IndexusMessage.StatusValue,System.String)">
            <summary>
            Adding an item to cache with all possibility options. All overloads are using this
            method to add items based on various provided variables. e.g. expire date time,
            item priority or to a specific host
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
            <param name="action">The action is always Add item to cache. See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.ActionValue"/> options.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
            <param name="status">The status of the request. See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.StatusValue"/></param>
            <param name="host">The host, represents the specific server node.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Object)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and
            DateTime.MaxValue. Items are only get cleared from cache in case
            max. cache factor arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Byte[])">
            <summary>
            Adding an item to cache. Items are added with Normal priority and
            DateTime.MaxValue. Items are only get cleared from cache in case
            max. cache factor arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Object,System.DateTime)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items
            with provided <see cref="T:System.DateTime"/>.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Byte[],System.DateTime)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items
            with provided <see cref="T:System.DateTime"/>.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Object,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and
            DateTime.MaxValue. Items are only get cleared from cache in case max. cache factor arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Byte[],SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and
            DateTime.MaxValue. Items are only get cleared from cache in case max. cache factor arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Object,System.String)">
            <summary>
            Adding an item to specific cache node. It let user to control on which server node the item will be placed.
            Items are added with normal priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and
            DateTime.MaxValue <see cref="T:System.DateTime"/>. Items are only get cleared from cache in case max. cache factor
            arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="host">The host represents the ip address of a server node.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Byte[],System.String)">
            <summary>
            Adding an item to specific cache node. It let user to control on which server node the item will be placed.
            Items are added with normal priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and
            DateTime.MaxValue <see cref="T:System.DateTime"/>. Items are only get cleared from cache in case max. cache factor
            arrived or the cache get refreshed.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="host">The host represents the ip address of a server node.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Object,System.DateTime,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items with provided <see cref="T:System.DateTime"/>.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Add(System.String,System.Byte[],System.DateTime,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items with provided <see cref="T:System.DateTime"/>.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.ExtendTtl(System.String,System.DateTime)">
            <summary>
            This Method extends item time to live.
            </summary>
            <remarks>WorkItem Request: http://www.codeplex.com/SharedCache/WorkItem/View.aspx?WorkItemId=6129</remarks>
            <param name="key">The key for cache item</param>
            <param name="expires">Identify when item will expire from the cache.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.ServerNodeVersionClr">
            <summary>
            Return Servers CLR (Common Language Runtime), this is needed to decide which 
            Hashing codes can be used.
            </summary>
            <returns>CLR (Common Language Runtime) version number as <see cref="T:System.String"/> e.g. xxxx.xxxx.xxxx.xxxx</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.ServerNodeVersionSharedCache">
            <summary>
            Returns current build version of Shared Cache
            </summary>
            <returns>Shared Cache version number as <see cref="T:System.String"/> e.g. xxxx.xxxx.xxxx.xxxx</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.GetAbsoluteTimeExpiration(System.Collections.Generic.List{System.String})">
            <summary>
            Gets the absolute time expiration of items within cache nodes
            </summary>
            <param name="keys">A list with keys of type <see cref="T:System.String"/></param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> were each key has its expiration absolute DateTime</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Get``1(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key for cache item</param>
            <returns>Returns received item as casted object T</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.GetBinary(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <remarks>http://sharedcache.codeplex.com/Thread/View.aspx?ThreadId=227865</remarks>
            <typeparam name="T"></typeparam>
            <param name="key">The key for cache item</param>
            <returns>Returns received item as casted object T</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Get(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <param name="key">The key for cache item</param>
            <returns>
            Returns received item as casted <see cref="T:System.Object"/>
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.MultiGet(System.Collections.Generic.List{System.String})">
            <summary>
            Based on a list of key's the client receives a dictonary with
            all available data depending on the keys.
            </summary>
            <param name="keys">A List of <see cref="T:System.String"/> with all requested keys.</param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array element.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.MultiAdd(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Adding a bunch of data to the cache, prevents to make several calls
            from the client to the server. All data is tranported with
            a <see cref="T:System.Collections.Generic.IDictionary`2"/> with a <see cref="T:System.String"/> and <see cref="T:System.Byte"/>
            array combination.
            </summary>
            <param name="data">The data to add as a <see cref="T:System.Collections.IDictionary"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.MultiDelete(System.Collections.Generic.List{System.String})">
            <summary>
            Delete a bunch of data from the cache. This prevents several calls from
            the client to the server. Only one single call is done with all relevant
            key's for the server node.
            </summary>
            <param name="keys">A List of <see cref="T:System.String"/> with all requested keys to delete</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Remove(System.String)">
            <summary>
            Remove cache item with provided key.
            </summary>
            <param name="key">The key for cache item</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.RegexRemove(System.String)">
            <summary>
            Remove Cache Items on server node based on regular expression. Each item which matches
            will be automatically removed from each server.
            </summary>
            <param name="regularExpression">The regular expression.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.RegexGet(System.String)">
            <summary>
            Returns items from cache node based on provided pattern.
            </summary>
            <param name="regularExpression">The regular expression.</param>
            <returns>
            An IDictionary with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array with all founded elementes
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Ping(System.String)">
            <summary>
            Pings the specified host.
            </summary>
            <param name="host">The host.</param>
            <returns>
            if the server is available then it returns true otherwise false.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.Clear">
            <summary>
            Force each configured cache server node to clear the cache.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.GetAllKeys(System.String)">
            <summary>
            Retrieve a list with all key which are available on all cofnigured server nodes.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>
            A List of <see cref="T:System.String"/> with all available keys.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.GetAllKeys">
            <summary>
            Retrieve a list with all key which are available on cache.
            </summary>
            <returns>
            A List of <see cref="T:System.String"/> with all available keys.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.GetStats(System.String)">
            <summary>
            Retrieve statistic information <see cref="T:SharedCache.WinServiceCommon.IndexusStatistic"/> from specific
            server based on provided host.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>
            an <see cref="T:SharedCache.WinServiceCommon.IndexusStatistic"/> object
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.GetStats">
            <summary>
            Retrieve all statistic information <see cref="T:SharedCache.WinServiceCommon.IndexusStatistic"/> from each configured
            server as one item.
            </summary>
            <returns>
            an aggrigated <see cref="T:SharedCache.WinServiceCommon.IndexusStatistic"/> object with all server statistics
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.GetServerForKey(System.String)">
            <summary>
            Return the ip server which handles this key by the hashcode of the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            the specific host ip as a <see cref="T:System.String"/> object.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractAdd(System.String,System.Object)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and
            DateTime.MaxValue. Items are only get cleared from cache in case
            max. cache factor arrived or the cache get refreshed.
            Data get serialized for DataContract.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractAdd(System.String,System.Object,System.DateTime)">
            <summary>
            Adding an item to cache. Items are added with Normal priority and
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items
            with provided <see cref="T:System.DateTime"/>.
            Data get serialized for DataContract.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractAdd(System.String,System.Object,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and
            DateTime.MaxValue. Items are only get cleared from cache in case max. cache factor arrived or the cache get refreshed.
            Data get serialized for DataContract.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractAdd(System.String,System.Object,System.String)">
            <summary>
            Adding an item to specific cache node. It let user to control on which server node the item will be placed.
            Items are added with normal priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and
            DateTime.MaxValue <see cref="T:System.DateTime"/>. Items are only get cleared from cache in case max. cache factor
            arrived or the cache get refreshed.
            Data get serialized for DataContract.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="host">The host represents the ip address of a server node.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractAdd(System.String,System.Object,System.DateTime,SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority)">
            <summary>
            Adding an item to cache. Items are added with provided priority <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/> and
            provided <see cref="T:System.DateTime"/>. Items get cleared from cache in case
            max. cache factor arrived, cache get refreshed or provided <see cref="T:System.DateTime"/>
            reached provided <see cref="T:System.DateTime"/>. The server takes care of items with provided <see cref="T:System.DateTime"/>.
            Data get serialized for DataContract.
            </summary>
            <param name="key">The key for cache item</param>
            <param name="payload">The payload which is the object itself.</param>
            <param name="expires">Identify when item will expire from the cache.</param>
            <param name="prio">Item priority - See also <see cref="T:SharedCache.WinServiceCommon.IndexusMessage.CacheItemPriority"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractGet``1(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <remarks>
            Data need to be added to cache over DataContractAdd() methods otherwise the application throws an exception.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="key">The key for cache item</param>
            <returns>Returns received item as casted object T</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractGet(System.String)">
            <summary>
            Retrieve specific item from cache based on provided key.
            </summary>
            <remarks>
            Data need to be added to cache over DataContractAdd() methods otherwise the application throws an exception.
            </remarks>
            <param name="key">The key for cache item</param>
            <returns>
            Returns received item as casted <see cref="T:System.Object"/>
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractMultiGet(System.Collections.Generic.List{System.String})">
            <summary>
            Based on a list of key's the client receives a dictonary with
            all available data depending on the keys.
            </summary>
            <remarks>
            Data need to be added to cache over DataContractAdd() methods otherwise the application throws an exception.
            </remarks>
            <param name="keys">A List of <see cref="T:System.String"/> with all requested keys.</param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array element.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractRegexGet(System.String)">
            <summary>
            Returns items from cache node based on provided pattern.
            </summary>
            <remarks>
            Data need to be added to cache over DataContractAdd() methods otherwise the application throws an exception.
            </remarks>
            <param name="regularExpression">The regular expression.</param>
            <returns>
            An IDictionary with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array with all founded elementes
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider.DataContractMultiAdd(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Adding a bunch of data to the cache, prevents to make several calls
            from the client to the server. All data is tranported with
            a <see cref="T:System.Collections.IDictionary"/> with a <see cref="T:System.String"/> and <see cref="T:System.Byte"/>
            array combination.
            </summary>
            <param name="data">The data to add as a <see cref="T:System.Collections.IDictionary"/></param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Encryption.IEncryptionProvider">
            <summary>
            IEncryptionProvider
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Encryption.IEncryptionProvider.Encrypt(System.Byte[])">
            <summary>
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Encryption.IEncryptionProvider.Decrypt(System.Byte[])">
            <summary>
            </summary>
            <param name="encryptedData"></param>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache">
            <summary>
            Loading defined providers in config files (web.config / app.config)
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache.#cctor">
            <summary>
            Initializes the <see cref="T:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache"/> class.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache.bulkObject">
            <summary>
            prevents concurrent usage of data
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache.providerBase">
            <summary>
            a static <see cref="T:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderBase"/> to load configured data.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache.providerCollection">
            <summary>
            a static <see cref="T:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderCollection"/> to load configured data.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache.providerSection">
            <summary>
            a static <see cref="T:SharedCache.WinServiceCommon.Configuration.Server.IndexusServerProviderSection"/> to load configured data.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache.CurrentProvider">
            <summary>
            Gets the current provider.
            </summary>
            <value>The current provider.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache.ProviderSection">
            <summary>
            Gets the provider section.
            </summary>
            <value>The provider section.</value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerReplicationCache.LoadProvider">
            <summary>
            Loads the provider which is configured in applicaiton config file (app.config / web.config)
            <example>
            <![CDATA[<?xml version="1.0" encoding="utf-8" ?>]]>
            <configSections>
            <section name="indexusNetSharedCache" type="SharedCache.WinServiceCommon.Configuration.Client.IndexusProviderSection, SharedCache.WinServiceCommon" />
            </configSections>
            
            <indexusNetSharedCache defaultProvider="IndexusSharedCacheProvider">
            	<servers>
            	   <add key="Server1"	ipaddress="10.0.0.3" port="48888" />
            	   <add key="Server2"	ipaddress="10.0.0.4" port="48888" />
            	</servers>
            	<providers>
            	   <add
            	     name="IndexusSharedCacheProvider"
            	     type="SharedCache.WinServiceCommon.Provider.Cache.IndexusSharedCacheProvider, SharedCache.WinServiceCommon" />
            	 </providers>
            </indexusNetSharedCache>
            </example>
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderBase">
            <summary>
            Implements the provider base for Shared Cache, based on Microsoft Provider Model.
            <example>
            <![CDATA[<?xml version="1.0" encoding="utf-8" ?>]]>
            <configSections>
            <section name="replicatedSharedCache" type="SharedCache.WinServiceCommon.Configuration.Server.IndexusServerProviderSection, SharedCache.WinServiceCommon"/>
            </configSections>
            
            <replicatedSharedCache defaultProvider="ServerSharedCacheProvider">
            	<replicatedServers>
            		<!-- DO NOT DEFINE THE INSTANCE ITSELF !!! IT WILL BE AUTOMATICALLY REMOVED -->
            		<add key="SrvZh02" ipaddress="192.168.212.37" port="48888" />
            	</replicatedServers>
            	<providers>
            		<add name="ServerSharedCacheProvider"
            	     type="SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider, SharedCache.WinServiceCommon">
            		</add>
            	</providers>
            </replicatedSharedCache>
            </example>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderBase.Count">
            <summary>
            Gets the amount of servers which are configured.
            </summary>
            <value>The amount of servers</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderBase.Servers">
            <summary>
            Gets the servers key's
            </summary>
            <value>The servers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderBase.ServersList">
            <summary>
            Gets the server list.
            </summary>
            <value>The server list.</value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderBase.Distribute(SharedCache.WinServiceCommon.IndexusMessage)">
            <summary>
            Distributes the specified to other server nodes.
            </summary>
            <param name="msg">The MSG <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderBase.Ping(System.String)">
            <summary>
            Pings the specified host.
            </summary>
            <param name="host">The host.</param>
            <returns>if the server is available then it returns true otherwise false.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderBase.GetAllKeys(System.String)">
            <summary>
            Retrieve a list with all key which are available on all cofnigured server nodes.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of strings with all available keys.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderBase.MultiGet(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Based on a list of key's the client receives a dictonary with
            all available data depending on the keys.
            </summary>
            <param name="keys">A List of <see cref="T:System.String"/> with all requested keys.</param>
            <param name="host">The host to request the key's from</param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array element.
            </returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderCollection">
            <summary>
            Represents a collection of provider objects that inherit from System.Configuration.Provider.ProviderCollection
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:SharedCache.WinServiceCommon.Provider.Cache.IndexusProviderBase"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Adds a provider to the collection.
            </summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.ArgumentException">The <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> of provider is null.- or -The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> of provider is less than 1.</exception>
            <exception cref="T:System.ArgumentNullException">provider is null.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/></PermissionSet>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider">
            <summary>
            Implementing a provider for Shared Cache based on
            Microsofts Provider model.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider"/> class.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider.Servers">
            <summary>
            Retriving a list of all available servers
            </summary>
            <value>An <see cref="T:System.String"/> array with all servers.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider.ServersList">
            <summary>
            Retriving a list of all available servers
            </summary>
            <value>The servers list.</value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider.Distribute(SharedCache.WinServiceCommon.IndexusMessage)">
            <summary>
            Distributes the specified to other server nodes.
            </summary>
            <param name="msg">The MSG <see cref="T:SharedCache.WinServiceCommon.IndexusMessage"/></param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider.Ping(System.String)">
            <summary>
            Pings the specified host.
            </summary>
            <param name="host">The host.</param>
            <returns>
            if the server is available then it returns true otherwise false.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider.GetAllKeys(System.String)">
            <summary>
            Retrieve a list with all key which are available on all cofnigured server nodes.
            </summary>
            <param name="host">The host represents the ip address of a server node.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of strings with all available keys.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Server.IndexusServerSharedCacheProvider.MultiGet(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Based on a list of key's the client receives a dictonary with
            all available data depending on the keys.
            </summary>
            <param name="keys">A List of <see cref="T:System.String"/> with all requested keys.</param>
            <param name="host">The host to request the key's from</param>
            <returns>
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> with <see cref="T:System.String"/> and <see cref="T:System.Byte"/> array element.
            </returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Session.IndexusProviderBase">
            <summary>
            IndexusProviderBase inherites from <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase"/>
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Session.IndexusSharedCacheStoreProvider">
            <summary>
            Custom implementation of the <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase"/>
            that uses the shared cache to store and fetch session state information.
            Session locking is implemented by adding a flag into the cached object after
            reading the object.  This is inefficient and not 100% safe and should be 
            changed if and when locking is written into the core SharedCache library.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Session.IndexusSharedCacheStoreProvider.Cache">
            <summary>
            Exposed internal Cache property to allow injection of new provider
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Session.IndexusSharedCacheStoreProvider.AppID">
            <summary>
            Gets and sets the app id used to distinguish this web application. 
            Defaults to <see cref="P:System.Web.HttpRuntime.AppDomainAppId"/>
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Session.IndexusSharedCacheStoreProvider.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase"></see> implementation.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Provider.Session.SessionStoreDataContext">
            <summary>
            Encapsulates a SessionStateStoreData with a lock object.  Static methods
            define how to serialize and deserialize the store data.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Session.SessionStoreDataContext.Data">
            <summary>
            Gets the read-only session state data
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Session.SessionStoreDataContext.LockDate">
            <summary>
            Gets or sets the lock date
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Provider.Session.SessionStoreDataContext.IsLocked">
            <summary>
            Gets whether this session is currently locked by checking 
            whether the lock date has a value
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Session.SessionStoreDataContext.ClearLock">
            <summary>
            Clears the lock date
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Session.SessionStoreDataContext.Serialize(SharedCache.WinServiceCommon.Provider.Session.SessionStoreDataContext)">
            <summary>
            Serializes a SessionStoreDataContext into binary data.
            </summary>
            <param name="info">The object to serialize</param>
            <returns>Binary data that can later be deserialized into a fully
            hydrated SessionStoreDataContext</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Provider.Session.SessionStoreDataContext.Deserialize(System.Byte[],System.Web.HttpContext)">
            <summary>
            Deserializes binary data into a fully hydrated SessionStoreDataContext.
            </summary>
            <param name="bytes">serialized binary data</param>
            <returns>The object representation of the session data</returns>
            <exception cref="T:System.Web.HttpException">Thrown if deserialization encounters a problem</exception>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Checksum.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Checksum.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Checksum.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Checksum.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Checksum.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="value">data update is based on</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>
            <param name="buffer">The buffer containing data to update the crc with.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Checksum.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buffer">block of data</param>
            <param name="offset">index of first byte to use</param>
            <param name="count">number of bytes to use</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
            <param name="seed">The seed value to initialise keys with.</param>
            <returns>A new key value.</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.SetStrategy(SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>		
            <returns>Return true if input is needed via <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output array.</param>
            <param name="offset">The offset into output array.</param>
            <param name="length">The maximum number of bytes to store.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <returns>The byte read cast to an int.  THe value is -1 if at the end of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <param name="buffer">The buffer to store read data in.</param>
            <param name="offset">The offset to start storing at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.  Zero if end of stream is detected.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">Flush</see> on the deflater and then
            on the underlying stream.  This ensures that all bytes are flushed.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.deflater_">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream_">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a <see cref="T:System.Byte"/> from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an <see cref="T:System.Int16"/> in little endian byte order.
            </summary>
            <returns>The short value read case to an int.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an <see cref="T:System.Int32"/> in little endian byte order.
            </summary>
            <returns>The int value read.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read a <see cref="T:System.Int64"/> in little endian byte order.
            </summary>
            <returns>The long value read.</returns>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="!:ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name ="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is less than zero
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name ="buffer">
            The array to read and decompress data into
            </param>
            <param name ="offset">
            The offset indicating where the data should be placed
            </param>
            <param name ="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:SharedCache.WinServiceCommon.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.UseZip64">
            <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.UseZip64.Off">
            <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
            <remarks>An entry can have this overridden if required <see cref="!:ZipEntry.ForceZip64"></see></remarks>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.UseZip64.On">
            <summary>
            Zip64 should always be used.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.UseZip64.Dynamic">
            <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Not supported by #Zip
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm">
            <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption has been used.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.Des">
            <summary>
            DES encryption has been used.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.RC2">
            <summary>
            RCS encryption has been used for encryption.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes168">
            <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes112">
            <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.Aes128">
            <summary>
            AES 128 has been used for encryption.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.Aes192">
            <summary>
            AES 192 has been used for encryption.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.Aes256">
            <summary>
            AES 256 has been used for encryption.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.RC2Corrected">
            <summary>
            RC2 corrected has been used for encryption.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish has been used for encryption.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.Twofish">
            <summary>
            Twofish has been used for encryption.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.RC4">
            <summary>
            RCS has been used for encryption.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.EncryptionAlgorithm.Unknown">
            <summary>
            An unknown algorithm has been used for encryption.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
            <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.Method">
            <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
            <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.ReservedPKware4">
            <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.Patched">
            <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            Bit 6 if set strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.Unused7">
            <summary>
            Bit 7 is currently unused
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.Unused8">
            <summary>
            Bit 8 is currently unused
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.Unused9">
            <summary>
            Bit 9 is currently unused
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.Unused10">
            <summary>
            Bit 10 is currently unused
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.UnicodeText">
            <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
            <remarks>
            Used when encrypting the central directory contents.
            </remarks>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware14">
            <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware15">
            <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="!:ZipEntry.CanDecompress"/>.
            </remarks>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="!:ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.VersionZip64">
            <summary>
            The version required for Zip64 extensions
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.LocalHeaderBaseSize">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.Zip64DataDescriptorSize">
            <summary>
            Size of Zip64 data descriptor
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.DataDescriptorSize">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.CentralHeaderBaseSize">
            <summary>
            Size of central header entry (excluding variable fields)
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.LocalHeaderSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.SpanningSignature">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.SpanningTempSignature">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.DataDescriptorSignature">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.CentralHeaderSignature">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.ArchiveExtraDataSignature">
            <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.CentralHeaderDigitalSignature">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.EndOfCentralDirectorySignature">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system OEM code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="count">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="data">
            Byte array to convert
            </param>
            <param name="count">The number of bytes to convert.</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <param name="flags">The applicable general purpose bits flags</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.Int32,System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SharpZipLib.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Sockets.ManageServerTcpSocketConnectionPoolFactory">
            <summary>
            A factory to load <see cref="T:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool"/>
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Sockets.ManageServerTcpSocketConnectionPoolFactory.instanceServer">
            <summary>
            a <see cref="T:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool"/> instance
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageServerTcpSocketConnectionPoolFactory.GetServerClient(System.String)">
            <summary>
            Gets the server client.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageServerTcpSocketConnectionPoolFactory.PutServerClient(System.String,SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient)">
            <summary>
            Puts the server client.
            </summary>
            <param name="host">The host.</param>
            <param name="client">The client.</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool">
            <summary>
            Managing the various Connection Pools to each server node within the client
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.bulkObject">
            <summary>
            lock down pool upon add / receive shared cache sockets
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.configuredHosts">
            <summary>
            contains the configured host in web.config / app.config
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.pools">
            <summary>
            a dictonary with the relevant pool for each server node
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.validatePoolTimer">
            <summary>
            a Timer which validat created pools. 
            </summary>
            Bugfix for: http://www.codeplex.com/SharedCache/WorkItem/View.aspx?WorkItemId=5847
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool"/> class.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.Available(System.String)">
            <summary>
            Determinates if specific pool is available.
            </summary>
            <param name="host">A <see cref="T:System.String"/> which defines the host.</param>
            <returns>A <see cref="T:System.Boolean"/> which represents the status.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.ValidateConnectionPools(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Validates all available pools. In case a one of the pool's is disabled 
            it will enable it automatically after it can ping specific server node.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.GetSocketFromPool(System.String)">
            <summary>
            Gets the socket from pool.
            </summary>
            <param name="host">The host.</param>
            <returns>A <see cref="T:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient"/> object.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageTcpSocketConnectionPool.PutSocketToPool(System.String,SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient)">
            <summary>
            Puts the socket to pool.
            </summary>
            <param name="host">The host.</param>
            <param name="socket">The socket.</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Sockets.ManageClientTcpSocketConnectionPoolFactory">
            <summary>
            A factory to access the Connection pools
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageClientTcpSocketConnectionPoolFactory.GetClient(System.String)">
            <summary>
            Gets the client from the pool based on the host
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.ManageClientTcpSocketConnectionPoolFactory.PutClient(System.String,SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient)">
            <summary>
            Puts the client back to the pool
            </summary>
            <param name="host">The host.</param>
            <param name="client">The client.</param>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject">
            <summary>
            Represents the State between each async call 
            and connection to the client socket.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.BufferSize">
            <summary>
            Defines the default buffer size
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.AlreadySent">
            <summary>
            Gets/sets the Already Sent byte amount
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.AlreadyRead">
            <summary>
            Gets/sets the AlreadyRead
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.ReadHeader">
            <summary>
            Gets/sets the if the logic needs to read the Header
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.MessageLength">
            <summary>
            Gets/sets the Message Length which needs to receive or send.
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.DataBigBuffer">
            <summary>
            Gets or sets the data big buffer.
            </summary>
            <value>The data big buffer.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.WorkSocket">
            <summary>
            Gets/sets the Worker Socket
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.Buffer">
            <summary>
            Gets/sets the temporary Buffer
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.AliveTimeStamp">
            <summary>
            Gets/sets the AliveTimeStamp before the server free up server resources
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.SharedCacheStateObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient">
            <summary>
            A Client object which handle all communication for a requst to the server 
            in a block mode.
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.bulkObject">
            <summary>
            use for lock() operations within the client
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.Host">
            <summary>
            Gets/sets the Host
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.Port">
            <summary>
            Gets/sets the Port
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.ServerConnection">
            <summary>
            Gets the ServerConnection
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.LastUsed">
            <summary>
            Gets/sets the LastUsed
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.Connected">
            <summary>
            Gets a value indicating whether this <see cref="T:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient"/> is connected.
            </summary>
            <value><c>true</c> if connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.Close">
            <summary>
            Closes the connection to the server.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.Send(System.Byte[])">
            <summary>
            Sends the specified data and returns the echo from the server.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.SetBlockingMode(System.Boolean)">
            <summary>
            Sets the blocking mode.
            </summary>
            <param name="mode">if set to <c>true</c> [mode].</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool">
            <summary>
            Represents a pool of connections for a specific server node.
            <example>
            Server: 192.168.0.1 Port: 48888
            </example>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool.Host">
            <summary>
            Gets/sets the Host
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool.Port">
            <summary>
            Gets/sets the Port
            </summary>
        </member>
        <member name="F:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool.availableSockets">
            <summary>Queue of available socket connections.</summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool.PoolSize">
            <summary>The maximum size of the connection pool.</summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool.PoolAvailable">
            <summary>
            Identify if this pool is available or not
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool.GetSocket">
            <summary>
            Get an open socket from the connection pool.
            </summary>
            <returns>Socket returned from the pool or new socket
            opened.</returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool.PutSocket(SharedCache.WinServiceCommon.Sockets.SharedCacheTcpClient)">
            <summary>
            Return the given socket back to the socket pool.
            </summary>
            <param name="socket">Socket connection to return.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Sockets.TcpSocketConnectionPool.OpenSocket">
            <summary>
            Open a new socket connection.
            </summary>
            <returns>Newly opened socket connection.</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SystemManagement.Cpu">
            <summary>
            Represents the CPU scope information
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SystemManagement.Cpu.LogCpuData">
            <summary>
            Logs the cpu data.
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.SystemManagement.Memory">
            <summary>
            Represents the Memory scope information
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SystemManagement.Memory.LogMemoryData">
            <summary>
            Logs the memory data.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.SystemManagement.Memory.ReadMemoryData">
            <summary>
            Reads the memory data.
            </summary>
            <returns>A <see cref="T:System.String"/> with all information</returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Threading.SharedCacheWorkRequestDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPoolDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Threading.ISharedCacheWorkRequest">
            <summary>
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.ISharedCacheWorkRequest.Cancel">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool">
             <summary>
             This defines a custom ThreadPool class that supports the following characteristics (property and method names shown in []):
            
             * can be explicitly started and stopped (and restarted) [Start,Stop,StopAndWait]
            
             * configurable thread priority [Priority]
            
             * configurable foreground/background characteristic [IsBackground]
            
             * configurable minimum thread count (called 'static' or 'permanent' threads) [constructor]
            
             * configurable maximum thread count (threads added over the minimum are
               called 'dynamic' threads) [constructor, MaxThreadCount]
            
             * configurable dynamic thread creation trigger (the point at which
               the pool decides to add new threads) [NewThreadTrigger]
            
             * configurable dynamic thread decay interval (the time period
               after which an idle dynamic thread will exit) [DynamicThreadDecay]
            
             * configurable limit (optional) to the request queue size (by default unbounded) [RequestQueueLimit]
            
             * pool extends WaitHandle, becomes signaled when last thread exits [StopAndWait, WaitHandle methods]
            
             * operations enqueued to the pool are cancellable [IWorkRequest returned by PostRequest]
            
             * enqueue operation supports early bound approach (ala ThreadPool.QueueUserWorkItem)
               as well as late bound approach (ala Control.Invoke/BeginInvoke) to posting work requests [PostRequest]
            
             * optional propogation of calling thread call context to target [PropogateCallContext]
            
             * optional propogation of calling thread principal to target [PropogateThreadPrincipal]
            
             * optional propogation of calling thread HttpContext to target [PropogateHttpContext]
            
             * support for started/stopped event subscription + notification [Started, Stopped]
            
             Known issues/limitations/comments:
            
             * The PropogateCASMarkers property exists for future support for propogating
               the calling thread's installed CAS markers in the same way that the built-in thread
               pool does.  Currently, there is no support for user-defined code to perform that
               operation.
            
             * PropogateCallContext and PropogateHttpContext both use reflection against private
               members to due their job.  As such, these two properties are set to false by default,
               but do work on the first release of the framework (including .NET Server) and its
               service packs.  These features have not been tested on Everett at this time.
             </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool"/> class.
            </summary>
            <param name="initialThreadCount">The initial thread count.</param>
            <param name="maxThreadCount">The max thread count.</param>
            <param name="poolName">Name of the pool.</param>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.#ctor(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Threading.ThreadPriority,System.Int32)">
            <summary>
            </summary>
            <param name="initialThreadCount"></param>
            <param name="maxThreadCount"></param>
            <param name="poolName"></param>
            <param name="newThreadTrigger"></param>
            <param name="dynamicThreadDecayTime"></param>
            <param name="threadPriority"></param>
            <param name="requestQueueLimit"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.DynamicThreadDecay">
            <summary>
            Gets or sets the dynamic thread decay.
            </summary>
            <value>The dynamic thread decay.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.NewThreadTrigger">
            <summary>
            Gets or sets the new thread trigger.
            </summary>
            <value>The new thread trigger.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.RequestQueueLimit">
            <summary>
            Gets or sets the request queue limit.
            </summary>
            <value>The request queue limit.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.AvailableThreads">
            <summary>
            Gets the available threads.
            </summary>
            <value>The available threads.</value>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.MaxThreads">
            <summary>
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.IsStarted">
            <summary>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PropogateThreadPrincipal">
            <summary>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PropogateCallContext">
            <summary>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PropogateHttpContext">
            <summary>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PropogateCASMarkers">
            <summary>
            </summary>
        </member>
        <member name="P:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.IsBackground">
            <summary>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="E:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.Started">
            <summary>
            </summary>
        </member>
        <member name="E:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.Stopped">
            <summary>
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.Start">
            <summary>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.StopAndWait">
            <summary>
            Stops the and wait.
            </summary>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.StopAndWait(System.Int32)">
            <summary>
            Stops the and wait.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PostRequest(SharedCache.WinServiceCommon.Threading.SharedCacheWorkRequestDelegate)">
            <summary>
            Overloads for the early bound WorkRequestDelegate-based targets.
            </summary>
            <param name="cb">The cb.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PostRequest(SharedCache.WinServiceCommon.Threading.SharedCacheWorkRequestDelegate,System.Object)">
            <summary>
            Posts the request.
            </summary>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PostRequest(SharedCache.WinServiceCommon.Threading.SharedCacheWorkRequestDelegate,System.Object,SharedCache.WinServiceCommon.Threading.ISharedCacheWorkRequest@)">
            <summary>
            Posts the request.
            </summary>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
            <param name="reqStatus">The req status.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PostRequest(System.Delegate,System.Object[])">
            <summary>
            Posts the request.
            </summary>
            <param name="cb">The cb.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PostRequest(System.Delegate,System.Object[],SharedCache.WinServiceCommon.Threading.ISharedCacheWorkRequest@)">
            <summary>
            Posts the request.
            </summary>
            <param name="cb">The cb.</param>
            <param name="args">The args.</param>
            <param name="reqStatus">The req status.</param>
            <returns></returns>
        </member>
        <member name="M:SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.PostRequest(SharedCache.WinServiceCommon.Threading.SharedCacheThreadPool.WorkRequest)">
            <summary>
            The actual implementation of PostRequest.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
    </members>
</doc>
